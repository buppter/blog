{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/package.json","path":"lib/bookmark/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/index.js","path":"lib/bookmark/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"5a7b1cc40c4633b9e0fb7559587d80b09775856f","modified":1548327134000},{"_id":"themes/next/.DS_Store","hash":"6ae98b7aba532fdb20b97dd707239b1d98584bd1","modified":1553690275057},{"_id":"source/CNAME","hash":"f816894eeb701d07139ce16d1e74c7f7835e629e","modified":1548332914000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1542298491000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1542298491000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1542298491000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1542298491000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1542298491000},{"_id":"source/.DS_Store","hash":"9444609f9744f1c7942470b58acce307ca8a2a26","modified":1563290107153},{"_id":"themes/next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1542298491000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1542298491000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1542298491000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1542298491000},{"_id":"themes/next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1542298491000},{"_id":"themes/next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1542298491000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1542298491000},{"_id":"themes/next/_config.yml","hash":"6285aa22cb92fba0a55128690d9c034b6ac4e73c","modified":1563456371756},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1542298491000},{"_id":"themes/next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1542298491000},{"_id":"source/_posts/Python后台开发面试题.md","hash":"547440b6a79cec6cd6f674e5de2a7291567bd17e","modified":1563463207757},{"_id":"source/_posts/macOS下给VScode安装Golang插件.md","hash":"deb1665d28832542b2429514ce10b1dab2bf32cb","modified":1554529118948},{"_id":"source/_posts/SQLAchemy中处理两张表之间存在多个外键的情况.md","hash":"d810e4ad1ece6e96482fc6d86428c8ca22af06c0","modified":1548409628261},{"_id":"source/_posts/数据库索引优化.md","hash":"c72720a05b51fd767db7a357cf2628ac3a6cc6b9","modified":1563458557637},{"_id":"source/tags/index.md","hash":"aae7603e6049d85fb252cb6e3e496b33590e0c74","modified":1553690723350},{"_id":"source/categories/index.md","hash":"5f5d46cfa392a185faf76a9ebccc7fe3f3f45f0c","modified":1553690525514},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1542298491000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1542298491000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1542298491000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1542298491000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1542298491000},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1542298491000},{"_id":"themes/next/docs/.DS_Store","hash":"07c3c8a1b10aa9b49a3c3f85a41a205e068587c2","modified":1553690220361},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1542298491000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1542298491000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1542298491000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1542298491000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1542298491000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1542298491000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1542298491000},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1542298491000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1542298491000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1542298491000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1542298491000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1542298491000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1542298491000},{"_id":"themes/next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1542298491000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1542298491000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1542298491000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1542298491000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1542298491000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1542298491000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1542298491000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1542298491000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1542298491000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1542298491000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1542298491000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1542298491000},{"_id":"themes/next/layout/_layout.swig","hash":"09e8a6bfe5aa901c66d314601c872e57f05509e8","modified":1542298491000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1542298491000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1542298491000},{"_id":"themes/next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1542298491000},{"_id":"themes/next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1542298491000},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1542298491000},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1542298491000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1542298491000},{"_id":"themes/next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1542298491000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1542298491000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1542298491000},{"_id":"themes/next/source/.DS_Store","hash":"8af85bb96026b78381a20304b566d7715b7e55ab","modified":1548384022432},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1542298491000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1542298491000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1542298491000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1542298491000},{"_id":"themes/next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1542298491000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1542298491000},{"_id":"themes/next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1542298491000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1542298491000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1542298491000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1542298491000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542298491000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1542298491000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1542298491000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1542298491000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1542298491000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1542298491000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1542298491000},{"_id":"themes/next/layout/_macro/post.swig","hash":"686e60ede86547bdd7bc34c3629e4c9dbd134a21","modified":1542298491000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1542298491000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1542298491000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1542298491000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1542298491000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1542298491000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"dc382b03b09f126e4880f12c838f8dc29745b245","modified":1548312787000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1542298491000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1542298491000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1542298491000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1542298491000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1542298491000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1542298491000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1542298491000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1542298491000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1542298491000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1542298491000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1542298491000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1542298491000},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1542298491000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1542298491000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1542298491000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1542298491000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1542298491000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1542298491000},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1542298491000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1542298491000},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1542298491000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1542298491000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1542298491000},{"_id":"themes/next/source/images/avatar.jpg","hash":"1d6d672dbc5651325306da7cdacd330137c3d4cd","modified":1542298491000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542298491000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1542298491000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542298491000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542298491000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542298491000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542298491000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542298491000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542298491000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542298491000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542298491000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"233fd28ae5af07ae3216ede3d13649c696fc8a4b","modified":1548311994000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"720ba72c07738853513303ca1e334c6c03926f3c","modified":1548311891000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542298491000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542298491000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542298491000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1542298491000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542298491000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542298491000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542298491000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1542298491000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1542298491000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1542298491000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1542298491000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1542298491000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1542298491000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1542298491000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1542298491000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1542298491000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1542298491000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1542298491000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1542298491000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1542298491000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1542298491000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1542298491000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1542298491000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1542298491000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1542298491000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1542298491000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1542298491000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1542298491000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1542298491000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1542298491000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1542298491000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1542298491000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1542298491000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1542298491000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1542298491000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1542298491000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5b5c5a6c74497983f6a5c7b49e4706f537db4f17","modified":1563457051040},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1542298491000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1542298491000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1542298491000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1542298491000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1542298491000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1542298491000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1542298491000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"74f62dcc9c711d5bbc811bbd3040fc6faccb0805","modified":1542298491000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1542298491000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542298491000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1542298491000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542298491000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1542298491000},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1542298491000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1542298491000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1542298491000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542298491000},{"_id":"themes/next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1542298491000},{"_id":"themes/next/source/lib/bookmark/.eslintignore","hash":"bbd18f176a313f38aafbce58b55ad002563a689b","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/.eslintrc.js","hash":"21e561d7708a2c4884ba0d03f148ce46253b08ad","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"c3036598ab8f45797460e48880c9e859268d574a","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"aef0ed533378c45cadb548e4b26b375e2501fe07","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/package.json","hash":"e3eedf4ba6fa086743553176f9526e1bf0b44439","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/index.js","hash":"1364ef511550daf991177d151a5fabc6539fced4","modified":1548315356000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1542298491000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542298491000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542298491000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542298491000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542298491000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1542298491000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1542298491000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1542298491000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0ea2c1bcb95eb438508471584afc6a4ebfa77212","modified":1563462968799},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1542298491000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1542298491000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1542298491000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1542298491000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1542298491000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1542298491000},{"_id":"themes/next/source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/config","hash":"372e915f4fb40d0662b65f33af12eb031385d511","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/index","hash":"0304096a1c94bae9a743c84b8c520ba364fcfdaf","modified":1548315356000},{"_id":"themes/next/source/lib/bookmark/.git/packed-refs","hash":"008500e778380804c9dee324e902a9da5b8d981b","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1548315356000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542298491000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542298491000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"f8f15657828030557af0169d6673af204b750a36","modified":1563457839660},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4d0a4d6ee883cc422cdc76836d4987fae36b6d57","modified":1563463016075},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"5daaee8d265f6b72957230d9ad9947216cb7ec10","modified":1563462968798},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1542298491000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542298491000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1548315351000},{"_id":"themes/next/source/lib/bookmark/.git/logs/HEAD","hash":"2dc5d8174ca6a1cce654e10de52334ea2e87f786","modified":1548315355000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542298491000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542298491000},{"_id":"themes/next/source/css/_common/components/post/Han.css","hash":"9ce806fc807e80add50110f2c6c573bdf5c1f94a","modified":1563456371773},{"_id":"themes/next/source/lib/bookmark/.git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/29/de98ce86c01618ebbe3352e213db74feda0dc0","hash":"046bf7ab442c095f0150c96fe06d83855c92092f","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/36/6ee3e25fa36be8ea88ed1c7913a8de8fd3b820","hash":"81c45f061381dd947da576758992b64b6101fbc8","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/16717bb5a449fab2291e6397c30c6cb34814f1","hash":"5e244da7b9b6dfc9ad924ee5259805d4ae272c2e","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/60/438c0c99eece781f9c7b2779ab7673ab34ba62","hash":"76032e20bf2916b03d9f795982831868f42a03af","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/69/d5670af93cd1d3f0acc082583b1d150c5d61b5","hash":"e6c6fdb25f5fc4949594e217ae14d309b2fba4a1","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/74/dba5056028cc4bac4f79ffec7da1e076260ffd","hash":"cd7bbf512f3c0291badb58f0679485c18a98c034","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/84/08abfa6c03a2809cb160da5badc6d1050bfbb3","hash":"9d3f29a89223403d1a0292681a330cbf7616c190","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/85/839f2b88dfaef92ae7c84c10f446e98d07b852","hash":"9662dba024cf43e039d41f4253e7aa282e2141ba","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/75/4a45e75b8a6dc256755287312c729adc2fc6c9","hash":"e700708d93a902401e54d96d4d632ae4225cdf2c","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/92/f5900e81d1cf9e90787b7138f4285434e45c10","hash":"05c5b8557d69133fd01ebd1b85a5e009a822ca20","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/a9/21fc59cd52b57fc3093fbdc04b446bae0a2f8a","hash":"a2e879b7fdb0cf153f8526064a6b8810b2cd8988","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/aa/d78f9de11c827340e4695cbc1f5a73f53ee577","hash":"0f5086a5818caf093dcf60126a7d0f72bc73928b","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/bc/0570da6c07cf361d794008e58455455a2580be","hash":"822af280dbbe78499a932faf9229f4c467d48cbe","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/c1/7940ffb480f454472c9083efabce723ff53cd4","hash":"29bbded01d4399f509abd809c00957f182226432","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/c6/26688a33395276a262158e171027a61c56150c","hash":"3727c122ab41e9dd1abc6490a40eb28f212c5c8e","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/ce/70a57b7d6bcddae01e3434d416c27c84b24727","hash":"d8ccbf99469b51ae629347665f96354c264457b4","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/de/52a356f671fa73a9d9910c26968d47100c655f","hash":"5bd5f521df149c8e24640151b6d83b3c6be1fd30","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/e7/aba3f8ec35017b4dd2bc8f5ca94253a8674ce7","hash":"8fe85003f71bf38e6ae367366ae6e95a819d046d","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1548315354000},{"_id":"themes/next/source/lib/bookmark/.git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/refs/heads/master","hash":"fce63708909b2252a3ec110e5bb2519a3d702c79","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/heads/master","hash":"2dc5d8174ca6a1cce654e10de52334ea2e87f786","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1548315355000},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"2dc5d8174ca6a1cce654e10de52334ea2e87f786","modified":1548315355000},{"_id":"public/atom.xml","hash":"f6311a75bee460d9f1183ea5a7f9c29616d4a63b","modified":1563463231665},{"_id":"public/search.xml","hash":"2698f8a51713e6b3b0cc1a4481270b47755db4c2","modified":1563463232833},{"_id":"public/404.html","hash":"ba276fbfec7d19fdbf7c2408d6a88f5747c7b84e","modified":1563463232842},{"_id":"public/categories/面试/index.html","hash":"9f855cb2d54c803766b90db75d211bddf4940b1c","modified":1563463232842},{"_id":"public/categories/编程/index.html","hash":"9fd8bf4d3d9fec83ef3e925e420c7f789f689d39","modified":1563463232842},{"_id":"public/categories/数据库/index.html","hash":"19be421e6fa9d72d295a21b483beb161516d7f55","modified":1563463232843},{"_id":"public/categories/Flask/index.html","hash":"133e1f197b6c3c580eb9e21c0f773270259272f7","modified":1563463232843},{"_id":"public/archives/2019/01/index.html","hash":"c9258f5b848b1abd5a0c86c765c0f2742ec539fd","modified":1563463232843},{"_id":"public/archives/2019/03/index.html","hash":"d1f674e09063f13f6a351822b3d30d4780d9a8ff","modified":1563463232843},{"_id":"public/archives/2019/04/index.html","hash":"1d65b6b64b9e61be392a8f6b4692a9c98cd9e643","modified":1563463232843},{"_id":"public/archives/2019/07/index.html","hash":"b69cccb827924c112672e262682fc3b8260c19c1","modified":1563463232843},{"_id":"public/tags/Python/index.html","hash":"8f39e66582dc964eb7c8c77591d657b0d64a2c1d","modified":1563463232843},{"_id":"public/tags/HTTP/index.html","hash":"af45a43bda0efe1a07b1d3e9036acf500f209500","modified":1563463232843},{"_id":"public/tags/面试/index.html","hash":"0eec222976bbc5d1af7b2369bc6e9c3bf1519f4f","modified":1563463232843},{"_id":"public/tags/Golang/index.html","hash":"10a8e4c00480d82ac1ca984c4f8b8de0966603d3","modified":1563463232843},{"_id":"public/tags/Flask/index.html","hash":"b6622577ab1ae43a3f771a0b256bb4966a5b288e","modified":1563463232843},{"_id":"public/tags/Flask-SQLAchemy/index.html","hash":"ed6afac4cb4b775e839d6ffeec88599e77543526","modified":1563463232843},{"_id":"public/tags/SQLAchemy/index.html","hash":"f8e1d4caa35e2b2decfb400dbab7bf3c945439c7","modified":1563463232843},{"_id":"public/tags/索引/index.html","hash":"7c1a4b1e0cf16d4de3a949bd9487e021794386d9","modified":1563463232843},{"_id":"public/tags/数据库/index.html","hash":"ccb883e218e2d3bf913fa5a25e0ec2eb07c3200a","modified":1563463232843},{"_id":"public/tags/index.html","hash":"7e23b812fddb0ba8b6348069641657add7791325","modified":1563463232843},{"_id":"public/2019/07/16/数据库索引优化/index.html","hash":"71845757afd9372e998e060d890df91c553d1956","modified":1563463232843},{"_id":"public/2019/03/27/Python后台开发面试题/index.html","hash":"c9584f796ddfdd282bf4e6f4981cc6f7a3a55d57","modified":1563463232843},{"_id":"public/categories/index.html","hash":"16a1f047586f5a6f83867dd75cd20b1031478e07","modified":1563463232844},{"_id":"public/2019/04/06/macOS下给VScode安装Golang插件/index.html","hash":"c2d1da2e0fed7ff0b4eb6ccb61e8ee67313d1e31","modified":1563463232844},{"_id":"public/2019/01/24/SQLAchemy中处理两张表之间存在多个外键的情况/index.html","hash":"9b9151f1db27f8a1fa2e9424269700bd7f6b980e","modified":1563463232844},{"_id":"public/archives/index.html","hash":"6c9f5248590317442138c056d329816b5811ed60","modified":1563463232844},{"_id":"public/archives/2019/index.html","hash":"18e609261c9dbcc62ebd016a2d18f8fb407b8a00","modified":1563463232844},{"_id":"public/index.html","hash":"c13aaa1ff0d548659e8067ce9d4f15ed8de914af","modified":1563463232844},{"_id":"public/tags/MySQL/index.html","hash":"7302f91a3eed7ec8e069e68bcbdd662bef6ad135","modified":1563463232844},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563463232847},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1563463232847},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563463232847},{"_id":"public/images/avatar.jpg","hash":"1d6d672dbc5651325306da7cdacd330137c3d4cd","modified":1563463232847},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563463232847},{"_id":"public/CNAME","hash":"f816894eeb701d07139ce16d1e74c7f7835e629e","modified":1563463232847},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563463232847},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563463232847},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563463232847},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563463232847},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563463232847},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563463232847},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563463232847},{"_id":"public/images/favicon-16x16-next.png","hash":"233fd28ae5af07ae3216ede3d13649c696fc8a4b","modified":1563463232847},{"_id":"public/images/favicon-32x32-next.png","hash":"720ba72c07738853513303ca1e334c6c03926f3c","modified":1563463232847},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563463232847},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563463232847},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1563463232848},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563463232848},{"_id":"public/lib/bookmark/LICENSE","hash":"c3036598ab8f45797460e48880c9e859268d574a","modified":1563463232848},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563463232848},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563463232848},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563463233242},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563463233755},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563463233755},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1563463233996},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1563463233996},{"_id":"public/js/src/bootstrap.js","hash":"0fdf15a8cd3761038235d502eb2ac38ff8dc5b8c","modified":1563463233997},{"_id":"public/js/src/affix.js","hash":"5e7a482df29d81c344d9e368f6f556b388028610","modified":1563463233997},{"_id":"public/js/src/js.cookie.js","hash":"d0e3823a51e691b961aee722e1c64cbfa0129308","modified":1563463233997},{"_id":"public/js/src/exturl.js","hash":"0e215f280fbb09157beaed03bf7dec15a4358243","modified":1563463233997},{"_id":"public/js/src/algolia-search.js","hash":"418809f1861820c9ca00d701584577d7d6e7426f","modified":1563463233997},{"_id":"public/js/src/motion.js","hash":"92cd41787c28919e9993889cf70728c6708ee260","modified":1563463233997},{"_id":"public/js/src/post-details.js","hash":"35f4866d2e925bf7e23bba382108f3abff994a0b","modified":1563463233997},{"_id":"public/js/src/scroll-cookie.js","hash":"d2e703e120054cb9f3f6e02e816fce1a224c88bd","modified":1563463233997},{"_id":"public/js/src/scrollspy.js","hash":"33455702b3e80603caa77a066a3ccb9d56c00d7e","modified":1563463233997},{"_id":"public/js/src/utils.js","hash":"e4c6890c43360ccdeb3dd052f6f2776c8bef41c8","modified":1563463233997},{"_id":"public/lib/bookmark/index.js","hash":"e4f9bae0dcb1d3488e2c838f169165466b2f69d7","modified":1563463233997},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1563463233997},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563463233997},{"_id":"public/lib/velocity/velocity.ui.js","hash":"285d55d996996742c1e1b316127e76fa5f0c4eb6","modified":1563463233998},{"_id":"public/js/src/schemes/pisces.js","hash":"ea3bca68e4e3cd6f45c7f567f8693cc3dd739f7c","modified":1563463233998},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a0542611089f7bfbec7b460abb58962ff8d0be9f","modified":1563463233998},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1563463233998},{"_id":"public/lib/bookmark/README.html","hash":"c8d4e0c05ae6cc207e6d31898bf1fb82e1e20054","modified":1563463233998},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563463233998},{"_id":"public/lib/jquery/index.js","hash":"44c2bb21826abce31132cc294a73114a29ef094b","modified":1563463233998},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563463233998},{"_id":"public/lib/velocity/velocity.js","hash":"69a45ad12c7e5eb1999b079cfe82639b2408cf2a","modified":1563463233998},{"_id":"public/css/main.css","hash":"5da576dce6b01f8cd827cf6fdd29351278991fda","modified":1563463234001},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"cda2a19b45e0822c61a205a3cb72addee53b1dc1","modified":1563463234001},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563463234001}],"Category":[{"name":"面试","_id":"cjy8tn16y0005m6wwtmzgxsq7"},{"name":"编程","_id":"cjy8tn1720009m6ww78a6sxj9"},{"name":"Flask","_id":"cjy8tn174000cm6ww8gjtfeic"},{"name":"数据库","_id":"cjy8tn175000fm6wwmn6uopnm"}],"Data":[],"Page":[{"toc":false,"comments":0,"_content":"<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                                                                                                        \n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://buppter.gitee.io\" homePageName=\"返回主页\"></script>\n\t</body>\n</html>\n","source":"404.html","raw":"---\ntoc: false\ncomments: false\npermalink: /404\n---\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                                                                                                        \n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"https://buppter.gitee.io\" homePageName=\"返回主页\"></script>\n\t</body>\n</html>\n","date":"2019-01-24T14:52:32.718Z","updated":"2019-01-24T10:52:14.000Z","path":"/404.html","title":"","layout":"page","_id":"cjy8tn15g0000m6wwktxfy7ps","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!DOCTYPE html><html><head><meta name=\"generator\" content=\"Hexo 3.8.0\"><meta charset=\"UTF-8\"><title>404</title></head><body><script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://buppter.gitee.io\" homepagename=\"返回主页\"></script></body></html><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!DOCTYPE html><html><head><meta name=\"generator\" content=\"Hexo 3.8.0\"><meta charset=\"UTF-8\"><title>404</title></head><body><script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://buppter.gitee.io\" homepagename=\"返回主页\"></script></body></html><!-- rebuild by neat -->"},{"title":"标签","date":"2019-01-24T02:48:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-01-24 10:48:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-03-27T12:45:23.350Z","path":"tags/index.html","layout":"page","_id":"cjy8tn16v0002m6wwhs091khs","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!-- rebuild by neat -->"},{"title":"文章分类","date":"2019-01-24T02:48:49.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-01-24 10:48:49\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-03-27T12:42:05.514Z","path":"categories/index.html","layout":"page","_id":"cjy8tn16x0004m6wwuc6pcm47","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><!-- rebuild by neat -->"}],"Post":[{"title":"Python后端开发面试题","date":"2019-03-27T11:08:17.000Z","_content":"整理了自己在Python后台开发求职面试过程中的一些面试题，基本涵盖了Python的基础知识，数据库知识，HTTP协议相关，以及基础的数据结构与算法。也方便自己后续面试的时候回来复习。  \n<!--more-->\n1. ##### Python的单例   \n\n    ```python\n    \"\"\"使用__new__来实现单例\"\"\"\n    class Singleton(object):\n        def __new__(cls, *args, **kwargs):\n            if not hasattr(cls, '_instance'):\n                cls._instance = super(Singleton,cls).__new__(cls, *args, **kwargs)\n            return cls._instance\n    ```\n\n    ```python\n    \"\"\"使用装饰器\"\"\"\n    def Singleton(func):\n        instance = {}\n        def wrapper(*args, **kwargs):\n            if func not in instance:\n                instance[func] = func(*args, **kwargs)\n            return instance[func]\n        return wrapper\n          \n    @Singleton\n    class Myclass:\n        pass\n    ```\n\n    ```python\n    \"\"\"使用模块\"\"\"\n    # singleton.py\n    class Singleton():\n        def foo(self):\n            pass\n    \n    singleton = Singleton()\n    \n    #将上边的代码保存为一个模块，然后可以在别的模块中引用\n    from singleton import singleton\n    \n    singleton.foo()\n    ```\n\n\n1. ##### Python的垃圾回收机制  \n    Python中的垃圾回收机制主要以`引用计数`为主，`标记-清除`和`分代回收`为辅。  \n    `引用计数`的缺点：1. 维护引用计数消耗资源。2. 循环引用问题  \n    `标记-清除`：分为两个阶段，第一阶段是标记阶段，把所有的活动对象打上标记；第二阶段把没有被标记的对象进行回收。      从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。在下图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记， 而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。  \n    缺点就是清除非活动对象前必须扫描整个堆内存。  \n\n    ![标记清除原理](https://s2.ax1x.com/2019/04/27/EKfaCR.jpg)   \n\n    `分代回收`：Python将内存根据生存时间划分为不同的集合，每个集合称为一个代。一共有三代，分别为年轻代（第0代），中年代（第1代），老年代（第2代）， 新创建的对象都被分在第0代，当第0代链表数达到上限，Python的垃圾回收机制就会被触发，把那些可以被回收的对象回收掉，不会被回收的就被移到第1代，以此类推。第2代中的对象就是存活时间最长的对象。  \n\n3. ##### Python的生成器、迭代器 \n    生成器节约内存，需要的时候才产生结果，而不是立即产生。\n    Python中有两种创建生成器的方式：第一种将列表推导式的方括号[]改成圆括号()；第二种是生成器函数，带有yield关键字的函数，使用yield返回值而不是return。  \n\n    ```python\n    \"\"\"生成器表达式\"\"\"\n    ge = (i**2 for i in range(4))\n    print(ge)\n    \n    for i in ge:\n        print(i)\n       \n    \"\"\"结果\"\"\"\n    <generator object <genexpr> at 0x02D5FE70>\n    0\n    1\n    4\n    9\n    ```\n\n    ```python\n    \"\"\"\n    生成器函数\n    使用生成器函数实现斐波那切数列\n    \"\"\"\n    def fib(n):\n        a, b, count = 0, 1, 0\n        while count < n:\n            yield b\n            a, b = b, a + b\n            count += 1\n        return \"Done\"\n    \n    print(fib(5))   \n    for i in fib(5):\n        print(i)\n              \n    \"\"\"输出结果\"\"\"\n    <generator object fib at 0x0376FE70>\n    1\n    1\n    2\n    3\n    5\n    ```\n\n\n    生成器有\\__next\\__()和send()两个方法。f.\\__next\\__()和next(f)作用都是一样的，打印生成器的下一个结果。send()主要用来向生成器中导入参数。在调用send()方法前需要至少调用一次next()或者有\\__next\\__()方法。也可以使用send(None)来实现对生成器函数的预激  \n\n   ```python\n    def test():\n        value = 0\n        while True:\n            temp = yield value\n            if temp == 'e':\n                break\n            value = \"got %s\" % temp\n        \n    t = test()\n    print(t.__next__()) # 或者print(next(t))  再或者 print(t.send(None))\n    t.send(\"hhh\")\n    t.send(\"aaa\")\n    t.send(\"e\")   \n    \n    \"\"\"运行结果\"\"\"\n    0\n    get hhh\n    get aaa\n    Traceback (most recent call last):\n      File \"test.py\", line 14, in <module>\n        print(t.send(\"e\"))\n    StopIteration\n\n   ```\n\n\n    **注意**：需要注意的一点是在使用`yield from`的时候会自动预激\n4. ##### Python的多线程、多进程、协程\n\n5. ##### Python的作用域\n\n3. ##### yield 和 yield from \n    [具体讲解](https://www.cnblogs.com/wongbingming/p/9085268.html)\n    \n1. ##### Python中的锁    \n    [具体讲解](https://www.cnblogs.com/wongbingming/p/9035575.html)\n    \n8. ##### Python的闭包，装饰器 \n\n9. ##### \\__init\\__ 和 \\__new__\n\n10. ##### \\*args`和 \\**kwages\n\n1. ##### 数据库中的锁  \n    乐观锁和悲观锁\n    \n2. ##### 数据库中的join  \n\n    ![](https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg)  \n\n    [具体讲解](https://blog.csdn.net/liitdar/article/details/80817087)\n    \n3. ##### MySQL的存储引擎  \n    InnoDB和MyISAM\n    \n4. ##### 数据库的事务  \n    [具体讲解](https://www.cnblogs.com/xrq730/p/5087378.html)\n    \n5. ##### 数据库的索引 \n    分为单行索引和组合索引。其中单行索引又分为普通索引、主键索引（不允许为空，唯一）和 唯一索引（可以为空，但唯一）  \n    [具体讲解](https://www.cnblogs.com/wuchanming/p/6886020.html)\n    \n16. ##### Redis的数据持久化（AOF和RDB)\n\n7. ##### HTTP 1.0、HTTP 1.1和HTTP 2.0的区别\n    [具体讲解](https://www.cnblogs.com/heluan/p/8620312.html)\n    \n8. ##### WebSocket  \n    WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。  \n    WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n    \n9.  ##### HTTP的请求报文和响应报文  \n    \n    ![请求报文](https://s2.ax1x.com/2019/04/27/EKfb5j.jpg)\n\n    ![响应报文](https://s2.ax1x.com/2019/04/27/EKfzrT.jpg)\n    \n10. ##### 一次完整的HTTP请求过程  \n    1. 域名解析  \n        1. 首先搜索浏览器自身的DNS缓存\n        2. 如果浏览器自身缓存没有，就搜索系统自身的缓存  \n        3. 如果系统自身的缓存没有，就搜索host文件\n        4. 如果host文件没有，则向本地配置的DNS服务器发起域名解析请求（本地域名服务器）\n        5. 如果本地域名服务器依旧没有找到，就会有递归和迭代两种方法解析  \n            1. 迭代：  \n                a. 本地域名服务器想根域名服务器发起请求  \n                b. 根域名服务器返回给本地域名服务器我们该向哪个顶级域名去请求  \n                c. 顶级域名服务器想权限域名服务器发请求  \n                d. 返回本地域名服务器IP地址  \n                e5. 返回给系统内核，最后返回给浏览器    \n            2. 递归：  \n                a. 本地域名服务器向根域名服务器发请求  \n                b. 之后根域名服务器向顶级域名服务器去找  \n                c. 顶级域名服务器返回给根域名服务器  \n                d. 根域名服务器返回给本地服务器  \n                e. 返回给系统，最后返回给浏览器  \n    2. TCP连接\n    3. 发起HTTP请求\n    4. 服务器响应HTTP请求，同时浏览器得到HTML代码\n    5. 浏览器解析HTML代码，并请求HTML代码中的资源\n    6. 浏览器将页面渲染给用户\n    \n11. ##### GET和POST的区别  \n    GET是将请求的数据和header一并发送给服务器，只发送一次TCP包  \n    POST是先发送header给服务器，然后服务器返回100，再将数据发送给服务器，发送了两次TCP包 \n    \n22. ##### TCP三次握手和四次挥手  \n\n13. ##### TIME_WAIT的原因  \n    发生在主动请求关闭的一方\n    \n14. ##### TCP和UDP的区别 \n    1. TCP面向连接，UDP无连接 \n    2. TCP提供可靠服务，UDP不保证可靠交付\n    3. UDP有较好的实时性\n    4. TCP只支持点到点通信，UDP支持一对一，一对多，多对一和多对多通信\n    5. TCP对系统资源要求较多，UDP对系统资源要求较少\n    6. TCP数据容易发生粘包\n    \n15. ##### TCP的粘包  \n    1. 发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。\n    2. 接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。  \n    3. 解决办法就是封包、拆包。给一段数据加上包头,这样一来数据包就分为包头和包体两部分内容了(以后讲过滤非法包时封包会加入\"包尾\"内容)。包头其实上是个大小固定的结构体，其中有个结构体成员变量表示包体的长度，这是个很重要的变量，其他的结构体成员可根据需要自己定义。根据包头长度固定以及包头中含有包体长度的变量就能正确的拆分出一个完整的数据包。\n    \n16. ##### select、poll和epoll的区别\n    select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。\n    \n    select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。  \n\n    缺点：   \n    1. select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024  \n    2. 对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。  \n    3. 需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。\n\n    poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。 poll没有最大连接数的限制，因为它是采用链表来存储的  \n\n    缺点：\n    1. 大量的fd的数组被整体复制于用户态和内核地址空间之间，对于系统的开销比较大  \n    2. poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。\n\n    **注意**：从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。  \n    \n    相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。  \n    \n    优点： \n    1. 没有最大并发连接的限制  \n    2. 效率提升，不是轮询的方式，不会随着FD数目的增加效率下降  \n    3. 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。  \n\n    在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符， 一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。 (此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在）   \n\n    ![支持一个进程所能打开的最大连接数](https://s2.ax1x.com/2019/04/27/EKhFi9.jpg)\n    \n    ![FD剧增后带来的IO效率问题](https://s2.ax1x.com/2019/04/27/EKhuZD.jpg)  \n        \n    ![消息传递方式](https://s2.ax1x.com/2019/04/27/EKhMIH.jpg) \n    \n    综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：  \n\n    1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。  \n    2、select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善。  \n    \n17. ##### 几种排序\n    \n    ![排序](https://s2.ax1x.com/2019/04/27/EKhadg.jpg)\n    \n    [具体讲解](https://www.cnblogs.com/fwl8888/p/9315730.html)\n    \n28. ##### 链表\n\n29. ##### 栈，队列\n\n30. ##### 完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树   \n     [平衡二叉树](https://blog.csdn.net/jacke121/article/details/78268602)\n\n     [红黑树](https://www.cnblogs.com/yyxt/p/4983967.html)\n\n     [B树，B+树](https://blog.csdn.net/z_ryan/article/details/79685072)  \n\n31. ##### 进程间的通信方式  \n     消息队列，信号量，管道，共享内存，Socket  \n\n     [具体讲解](https://www.cnblogs.com/zgq0/p/8780893.html)\n\n32. ##### 进程程的状态\n     就绪，运行，阻塞  \n\n     [具体讲解](https://www.cnblogs.com/zxf98/p/5716296.html)\n\n33. ##### Docker\n     [具体讲解](https://blog.csdn.net/wh211212/article/details/53208960)  \n\n34. ##### 网络七层协议，五层协议，TCP/IP四层协议\n     七层：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层  \n     五层：物理层，数据链路层，网络层，传输层，应用层  \n     四层：网络接口层，网络层，传输层，应用层 \n\n     [具体讲解](https://blog.csdn.net/cc1949/article/details/79063439)\n\n35. ##### RESRful\n     1. 使用HTTPS  \n     2. API域名和版本号  \n     3. HTTP动词，GET、DELETE、PUT、POST\n     4. 过滤，排序，搜索，分页\n     5. 状态码和文字说明\n     6. 文档  \n\n     [具体讲解](https://blog.csdn.net/u013007900/article/details/79875287)\n\n36. ##### MVVC\n     多版本并发控制  \n\n     [具体讲解](https://www.cnblogs.com/hirampeng/p/9944200.html)\n\n37. ##### Ping用的什么协议\n     ICMP 网络控制消息协议\n\n38. ##### 堆排序\n     堆(heap): 父节点的值大于子节点的值的完全二叉树  \n\n     ![求第i个节点的父子节点](https://s2.ax1x.com/2019/04/27/EKhWo4.jpg)\n\n     ```python\n     \n     def heapify(alist, n, i):\n         if i >= n:\n             return\n         c1 = 2 * i + 1\n         c2 = 2 * i + 2\n         max_index = i\n         if c1 < n and alist[c1] > alist[max_index]:\n             max_index = c1\n         if c2 < n and alist[c2] > alist[max_index]:\n             max_index = c2\n         if max_index != i:\n             alist[i], alist[max_index] = alist[max_index], alist[i]\n             heapify(alist, n, max_index)\n     \n     def build_heap(alist, n):\n         last_node = n - 1\n         last_node_parent = n//2 -1\n         for i in range(last_node_parent, -1, -1):\n             heapify(alist, n, i)\n     \n     def heap_sort(alist, n):\n         build_heap(alist, n)\n         for i in range(n-1, -1, -1):\n             alist[i], alist[0] = alist[0], alist[i]\n             heapify(alist, i, 0)\n     ```\n\n","source":"_posts/Python后台开发面试题.md","raw":"---\ntitle: Python后端开发面试题  \ndate: 2019-03-27 19:08:17  \ncategories: 面试  \ntags:  \n    - Python  \n    - HTTP     \n    - MySQL  \n    - 面试  \n    \n---\n整理了自己在Python后台开发求职面试过程中的一些面试题，基本涵盖了Python的基础知识，数据库知识，HTTP协议相关，以及基础的数据结构与算法。也方便自己后续面试的时候回来复习。  \n<!--more-->\n1. ##### Python的单例   \n\n    ```python\n    \"\"\"使用__new__来实现单例\"\"\"\n    class Singleton(object):\n        def __new__(cls, *args, **kwargs):\n            if not hasattr(cls, '_instance'):\n                cls._instance = super(Singleton,cls).__new__(cls, *args, **kwargs)\n            return cls._instance\n    ```\n\n    ```python\n    \"\"\"使用装饰器\"\"\"\n    def Singleton(func):\n        instance = {}\n        def wrapper(*args, **kwargs):\n            if func not in instance:\n                instance[func] = func(*args, **kwargs)\n            return instance[func]\n        return wrapper\n          \n    @Singleton\n    class Myclass:\n        pass\n    ```\n\n    ```python\n    \"\"\"使用模块\"\"\"\n    # singleton.py\n    class Singleton():\n        def foo(self):\n            pass\n    \n    singleton = Singleton()\n    \n    #将上边的代码保存为一个模块，然后可以在别的模块中引用\n    from singleton import singleton\n    \n    singleton.foo()\n    ```\n\n\n1. ##### Python的垃圾回收机制  \n    Python中的垃圾回收机制主要以`引用计数`为主，`标记-清除`和`分代回收`为辅。  \n    `引用计数`的缺点：1. 维护引用计数消耗资源。2. 循环引用问题  \n    `标记-清除`：分为两个阶段，第一阶段是标记阶段，把所有的活动对象打上标记；第二阶段把没有被标记的对象进行回收。      从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。在下图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记， 而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。  \n    缺点就是清除非活动对象前必须扫描整个堆内存。  \n\n    ![标记清除原理](https://s2.ax1x.com/2019/04/27/EKfaCR.jpg)   \n\n    `分代回收`：Python将内存根据生存时间划分为不同的集合，每个集合称为一个代。一共有三代，分别为年轻代（第0代），中年代（第1代），老年代（第2代）， 新创建的对象都被分在第0代，当第0代链表数达到上限，Python的垃圾回收机制就会被触发，把那些可以被回收的对象回收掉，不会被回收的就被移到第1代，以此类推。第2代中的对象就是存活时间最长的对象。  \n\n3. ##### Python的生成器、迭代器 \n    生成器节约内存，需要的时候才产生结果，而不是立即产生。\n    Python中有两种创建生成器的方式：第一种将列表推导式的方括号[]改成圆括号()；第二种是生成器函数，带有yield关键字的函数，使用yield返回值而不是return。  \n\n    ```python\n    \"\"\"生成器表达式\"\"\"\n    ge = (i**2 for i in range(4))\n    print(ge)\n    \n    for i in ge:\n        print(i)\n       \n    \"\"\"结果\"\"\"\n    <generator object <genexpr> at 0x02D5FE70>\n    0\n    1\n    4\n    9\n    ```\n\n    ```python\n    \"\"\"\n    生成器函数\n    使用生成器函数实现斐波那切数列\n    \"\"\"\n    def fib(n):\n        a, b, count = 0, 1, 0\n        while count < n:\n            yield b\n            a, b = b, a + b\n            count += 1\n        return \"Done\"\n    \n    print(fib(5))   \n    for i in fib(5):\n        print(i)\n              \n    \"\"\"输出结果\"\"\"\n    <generator object fib at 0x0376FE70>\n    1\n    1\n    2\n    3\n    5\n    ```\n\n\n    生成器有\\__next\\__()和send()两个方法。f.\\__next\\__()和next(f)作用都是一样的，打印生成器的下一个结果。send()主要用来向生成器中导入参数。在调用send()方法前需要至少调用一次next()或者有\\__next\\__()方法。也可以使用send(None)来实现对生成器函数的预激  \n\n   ```python\n    def test():\n        value = 0\n        while True:\n            temp = yield value\n            if temp == 'e':\n                break\n            value = \"got %s\" % temp\n        \n    t = test()\n    print(t.__next__()) # 或者print(next(t))  再或者 print(t.send(None))\n    t.send(\"hhh\")\n    t.send(\"aaa\")\n    t.send(\"e\")   \n    \n    \"\"\"运行结果\"\"\"\n    0\n    get hhh\n    get aaa\n    Traceback (most recent call last):\n      File \"test.py\", line 14, in <module>\n        print(t.send(\"e\"))\n    StopIteration\n\n   ```\n\n\n    **注意**：需要注意的一点是在使用`yield from`的时候会自动预激\n4. ##### Python的多线程、多进程、协程\n\n5. ##### Python的作用域\n\n3. ##### yield 和 yield from \n    [具体讲解](https://www.cnblogs.com/wongbingming/p/9085268.html)\n    \n1. ##### Python中的锁    \n    [具体讲解](https://www.cnblogs.com/wongbingming/p/9035575.html)\n    \n8. ##### Python的闭包，装饰器 \n\n9. ##### \\__init\\__ 和 \\__new__\n\n10. ##### \\*args`和 \\**kwages\n\n1. ##### 数据库中的锁  \n    乐观锁和悲观锁\n    \n2. ##### 数据库中的join  \n\n    ![](https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg)  \n\n    [具体讲解](https://blog.csdn.net/liitdar/article/details/80817087)\n    \n3. ##### MySQL的存储引擎  \n    InnoDB和MyISAM\n    \n4. ##### 数据库的事务  \n    [具体讲解](https://www.cnblogs.com/xrq730/p/5087378.html)\n    \n5. ##### 数据库的索引 \n    分为单行索引和组合索引。其中单行索引又分为普通索引、主键索引（不允许为空，唯一）和 唯一索引（可以为空，但唯一）  \n    [具体讲解](https://www.cnblogs.com/wuchanming/p/6886020.html)\n    \n16. ##### Redis的数据持久化（AOF和RDB)\n\n7. ##### HTTP 1.0、HTTP 1.1和HTTP 2.0的区别\n    [具体讲解](https://www.cnblogs.com/heluan/p/8620312.html)\n    \n8. ##### WebSocket  \n    WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。  \n    WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n    \n9.  ##### HTTP的请求报文和响应报文  \n    \n    ![请求报文](https://s2.ax1x.com/2019/04/27/EKfb5j.jpg)\n\n    ![响应报文](https://s2.ax1x.com/2019/04/27/EKfzrT.jpg)\n    \n10. ##### 一次完整的HTTP请求过程  \n    1. 域名解析  \n        1. 首先搜索浏览器自身的DNS缓存\n        2. 如果浏览器自身缓存没有，就搜索系统自身的缓存  \n        3. 如果系统自身的缓存没有，就搜索host文件\n        4. 如果host文件没有，则向本地配置的DNS服务器发起域名解析请求（本地域名服务器）\n        5. 如果本地域名服务器依旧没有找到，就会有递归和迭代两种方法解析  \n            1. 迭代：  \n                a. 本地域名服务器想根域名服务器发起请求  \n                b. 根域名服务器返回给本地域名服务器我们该向哪个顶级域名去请求  \n                c. 顶级域名服务器想权限域名服务器发请求  \n                d. 返回本地域名服务器IP地址  \n                e5. 返回给系统内核，最后返回给浏览器    \n            2. 递归：  \n                a. 本地域名服务器向根域名服务器发请求  \n                b. 之后根域名服务器向顶级域名服务器去找  \n                c. 顶级域名服务器返回给根域名服务器  \n                d. 根域名服务器返回给本地服务器  \n                e. 返回给系统，最后返回给浏览器  \n    2. TCP连接\n    3. 发起HTTP请求\n    4. 服务器响应HTTP请求，同时浏览器得到HTML代码\n    5. 浏览器解析HTML代码，并请求HTML代码中的资源\n    6. 浏览器将页面渲染给用户\n    \n11. ##### GET和POST的区别  \n    GET是将请求的数据和header一并发送给服务器，只发送一次TCP包  \n    POST是先发送header给服务器，然后服务器返回100，再将数据发送给服务器，发送了两次TCP包 \n    \n22. ##### TCP三次握手和四次挥手  \n\n13. ##### TIME_WAIT的原因  \n    发生在主动请求关闭的一方\n    \n14. ##### TCP和UDP的区别 \n    1. TCP面向连接，UDP无连接 \n    2. TCP提供可靠服务，UDP不保证可靠交付\n    3. UDP有较好的实时性\n    4. TCP只支持点到点通信，UDP支持一对一，一对多，多对一和多对多通信\n    5. TCP对系统资源要求较多，UDP对系统资源要求较少\n    6. TCP数据容易发生粘包\n    \n15. ##### TCP的粘包  \n    1. 发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。\n    2. 接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。  \n    3. 解决办法就是封包、拆包。给一段数据加上包头,这样一来数据包就分为包头和包体两部分内容了(以后讲过滤非法包时封包会加入\"包尾\"内容)。包头其实上是个大小固定的结构体，其中有个结构体成员变量表示包体的长度，这是个很重要的变量，其他的结构体成员可根据需要自己定义。根据包头长度固定以及包头中含有包体长度的变量就能正确的拆分出一个完整的数据包。\n    \n16. ##### select、poll和epoll的区别\n    select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。\n    \n    select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。  \n\n    缺点：   \n    1. select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024  \n    2. 对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。  \n    3. 需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。\n\n    poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。 poll没有最大连接数的限制，因为它是采用链表来存储的  \n\n    缺点：\n    1. 大量的fd的数组被整体复制于用户态和内核地址空间之间，对于系统的开销比较大  \n    2. poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。\n\n    **注意**：从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。  \n    \n    相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。  \n    \n    优点： \n    1. 没有最大并发连接的限制  \n    2. 效率提升，不是轮询的方式，不会随着FD数目的增加效率下降  \n    3. 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。  \n\n    在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符， 一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。 (此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在）   \n\n    ![支持一个进程所能打开的最大连接数](https://s2.ax1x.com/2019/04/27/EKhFi9.jpg)\n    \n    ![FD剧增后带来的IO效率问题](https://s2.ax1x.com/2019/04/27/EKhuZD.jpg)  \n        \n    ![消息传递方式](https://s2.ax1x.com/2019/04/27/EKhMIH.jpg) \n    \n    综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：  \n\n    1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。  \n    2、select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善。  \n    \n17. ##### 几种排序\n    \n    ![排序](https://s2.ax1x.com/2019/04/27/EKhadg.jpg)\n    \n    [具体讲解](https://www.cnblogs.com/fwl8888/p/9315730.html)\n    \n28. ##### 链表\n\n29. ##### 栈，队列\n\n30. ##### 完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树   \n     [平衡二叉树](https://blog.csdn.net/jacke121/article/details/78268602)\n\n     [红黑树](https://www.cnblogs.com/yyxt/p/4983967.html)\n\n     [B树，B+树](https://blog.csdn.net/z_ryan/article/details/79685072)  \n\n31. ##### 进程间的通信方式  \n     消息队列，信号量，管道，共享内存，Socket  \n\n     [具体讲解](https://www.cnblogs.com/zgq0/p/8780893.html)\n\n32. ##### 进程程的状态\n     就绪，运行，阻塞  \n\n     [具体讲解](https://www.cnblogs.com/zxf98/p/5716296.html)\n\n33. ##### Docker\n     [具体讲解](https://blog.csdn.net/wh211212/article/details/53208960)  \n\n34. ##### 网络七层协议，五层协议，TCP/IP四层协议\n     七层：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层  \n     五层：物理层，数据链路层，网络层，传输层，应用层  \n     四层：网络接口层，网络层，传输层，应用层 \n\n     [具体讲解](https://blog.csdn.net/cc1949/article/details/79063439)\n\n35. ##### RESRful\n     1. 使用HTTPS  \n     2. API域名和版本号  \n     3. HTTP动词，GET、DELETE、PUT、POST\n     4. 过滤，排序，搜索，分页\n     5. 状态码和文字说明\n     6. 文档  \n\n     [具体讲解](https://blog.csdn.net/u013007900/article/details/79875287)\n\n36. ##### MVVC\n     多版本并发控制  \n\n     [具体讲解](https://www.cnblogs.com/hirampeng/p/9944200.html)\n\n37. ##### Ping用的什么协议\n     ICMP 网络控制消息协议\n\n38. ##### 堆排序\n     堆(heap): 父节点的值大于子节点的值的完全二叉树  \n\n     ![求第i个节点的父子节点](https://s2.ax1x.com/2019/04/27/EKhWo4.jpg)\n\n     ```python\n     \n     def heapify(alist, n, i):\n         if i >= n:\n             return\n         c1 = 2 * i + 1\n         c2 = 2 * i + 2\n         max_index = i\n         if c1 < n and alist[c1] > alist[max_index]:\n             max_index = c1\n         if c2 < n and alist[c2] > alist[max_index]:\n             max_index = c2\n         if max_index != i:\n             alist[i], alist[max_index] = alist[max_index], alist[i]\n             heapify(alist, n, max_index)\n     \n     def build_heap(alist, n):\n         last_node = n - 1\n         last_node_parent = n//2 -1\n         for i in range(last_node_parent, -1, -1):\n             heapify(alist, n, i)\n     \n     def heap_sort(alist, n):\n         build_heap(alist, n)\n         for i in range(n-1, -1, -1):\n             alist[i], alist[0] = alist[0], alist[i]\n             heapify(alist, i, 0)\n     ```\n\n","slug":"Python后台开发面试题","published":1,"updated":"2019-07-18T15:20:07.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy8tn16s0001m6wwsewsije9","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>整理了自己在Python后台开发求职面试过程中的一些面试题，基本涵盖了Python的基础知识，数据库知识，HTTP协议相关，以及基础的数据结构与算法。也方便自己后续面试的时候回来复习。<br><a id=\"more\"></a></p><ol><li><h5 id=\"Python的单例\"><a href=\"#Python的单例\" class=\"headerlink\" title=\"Python的单例\"></a>Python的单例</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用__new__来实现单例\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton,cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用装饰器\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Singleton</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> func <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[func] = func(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[func]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myclass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用模块\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># singleton.py</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">singleton = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将上边的代码保存为一个模块，然后可以在别的模块中引用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> singleton <span class=\"keyword\">import</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\">singleton.foo()</span><br></pre></td></tr></table></figure></li><li><h5 id=\"Python的垃圾回收机制\"><a href=\"#Python的垃圾回收机制\" class=\"headerlink\" title=\"Python的垃圾回收机制\"></a>Python的垃圾回收机制</h5><p>Python中的垃圾回收机制主要以<code>引用计数</code>为主，<code>标记-清除</code>和<code>分代回收</code>为辅。<br><code>引用计数</code>的缺点：1. 维护引用计数消耗资源。2. 循环引用问题<br><code>标记-清除</code>：分为两个阶段，第一阶段是标记阶段，把所有的活动对象打上标记；第二阶段把没有被标记的对象进行回收。 从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。在下图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记， 而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。<br>缺点就是清除非活动对象前必须扫描整个堆内存。</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfaCR.jpg\" alt=\"标记清除原理\"></p><p><code>分代回收</code>：Python将内存根据生存时间划分为不同的集合，每个集合称为一个代。一共有三代，分别为年轻代（第0代），中年代（第1代），老年代（第2代）， 新创建的对象都被分在第0代，当第0代链表数达到上限，Python的垃圾回收机制就会被触发，把那些可以被回收的对象回收掉，不会被回收的就被移到第1代，以此类推。第2代中的对象就是存活时间最长的对象。</p></li><li><h5 id=\"Python的生成器、迭代器\"><a href=\"#Python的生成器、迭代器\" class=\"headerlink\" title=\"Python的生成器、迭代器\"></a>Python的生成器、迭代器</h5><p>生成器节约内存，需要的时候才产生结果，而不是立即产生。<br>Python中有两种创建生成器的方式：第一种将列表推导式的方括号[]改成圆括号()；第二种是生成器函数，带有yield关键字的函数，使用yield返回值而不是return。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"生成器表达式\"\"\"</span></span><br><span class=\"line\">ge = (i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>))</span><br><span class=\"line\">print(ge)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ge:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"string\">\"\"\"结果\"\"\"</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x02D5FE70</span>&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">生成器函数</span></span><br><span class=\"line\"><span class=\"string\">使用生成器函数实现斐波那切数列</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    a, b, count = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> count &lt; n:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Done\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(fib(<span class=\"number\">5</span>))   </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fib(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">          </span><br><span class=\"line\"><span class=\"string\">\"\"\"输出结果\"\"\"</span></span><br><span class=\"line\">&lt;generator object fib at <span class=\"number\">0x0376FE70</span>&gt;</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>生成器有__next__()和send()两个方法。f.__next__()和next(f)作用都是一样的，打印生成器的下一个结果。send()主要用来向生成器中导入参数。在调用send()方法前需要至少调用一次next()或者有__next__()方法。也可以使用send(None)来实现对生成器函数的预激</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    value = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        temp = <span class=\"keyword\">yield</span> value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp == <span class=\"string\">'e'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        value = <span class=\"string\">\"got %s\"</span> % temp</span><br><span class=\"line\">    </span><br><span class=\"line\">t = test()</span><br><span class=\"line\">print(t.__next__()) <span class=\"comment\"># 或者print(next(t))  再或者 print(t.send(None))</span></span><br><span class=\"line\">t.send(<span class=\"string\">\"hhh\"</span>)</span><br><span class=\"line\">t.send(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">t.send(<span class=\"string\">\"e\"</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"运行结果\"\"\"</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">get hhh</span><br><span class=\"line\">get aaa</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">14</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    print(t.send(<span class=\"string\">\"e\"</span>))</span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：需要注意的一点是在使用<code>yield from</code>的时候会自动预激</p></li><li><h5 id=\"Python的多线程、多进程、协程\"><a href=\"#Python的多线程、多进程、协程\" class=\"headerlink\" title=\"Python的多线程、多进程、协程\"></a>Python的多线程、多进程、协程</h5></li><li><h5 id=\"Python的作用域\"><a href=\"#Python的作用域\" class=\"headerlink\" title=\"Python的作用域\"></a>Python的作用域</h5></li><li><h5 id=\"yield-和-yield-from\"><a href=\"#yield-和-yield-from\" class=\"headerlink\" title=\"yield 和 yield from\"></a>yield 和 yield from</h5><p><a href=\"https://www.cnblogs.com/wongbingming/p/9085268.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Python中的锁\"><a href=\"#Python中的锁\" class=\"headerlink\" title=\"Python中的锁\"></a>Python中的锁</h5><p><a href=\"https://www.cnblogs.com/wongbingming/p/9035575.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Python的闭包，装饰器\"><a href=\"#Python的闭包，装饰器\" class=\"headerlink\" title=\"Python的闭包，装饰器\"></a>Python的闭包，装饰器</h5></li><li><h5 id=\"init-和-new\"><a href=\"#init-和-new\" class=\"headerlink\" title=\"__init__ 和 __new__\"></a>__init__ 和 __new__</h5></li><li><h5 id=\"args-和-kwages\"><a href=\"#args-和-kwages\" class=\"headerlink\" title=\"*args`和 **kwages\"></a>*args`和 **kwages</h5></li><li><h5 id=\"数据库中的锁\"><a href=\"#数据库中的锁\" class=\"headerlink\" title=\"数据库中的锁\"></a>数据库中的锁</h5><p>乐观锁和悲观锁</p></li><li><h5 id=\"数据库中的join\"><a href=\"#数据库中的join\" class=\"headerlink\" title=\"数据库中的join\"></a>数据库中的join</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg\" alt=\"\"></p><p><a href=\"https://blog.csdn.net/liitdar/article/details/80817087\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"MySQL的存储引擎\"><a href=\"#MySQL的存储引擎\" class=\"headerlink\" title=\"MySQL的存储引擎\"></a>MySQL的存储引擎</h5><p>InnoDB和MyISAM</p></li><li><h5 id=\"数据库的事务\"><a href=\"#数据库的事务\" class=\"headerlink\" title=\"数据库的事务\"></a>数据库的事务</h5><p><a href=\"https://www.cnblogs.com/xrq730/p/5087378.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"数据库的索引\"><a href=\"#数据库的索引\" class=\"headerlink\" title=\"数据库的索引\"></a>数据库的索引</h5><p>分为单行索引和组合索引。其中单行索引又分为普通索引、主键索引（不允许为空，唯一）和 唯一索引（可以为空，但唯一）<br><a href=\"https://www.cnblogs.com/wuchanming/p/6886020.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Redis的数据持久化（AOF和RDB\"><a href=\"#Redis的数据持久化（AOF和RDB\" class=\"headerlink\" title=\"Redis的数据持久化（AOF和RDB)\"></a>Redis的数据持久化（AOF和RDB)</h5></li><li><h5 id=\"HTTP-1-0、HTTP-1-1和HTTP-2-0的区别\"><a href=\"#HTTP-1-0、HTTP-1-1和HTTP-2-0的区别\" class=\"headerlink\" title=\"HTTP 1.0、HTTP 1.1和HTTP 2.0的区别\"></a>HTTP 1.0、HTTP 1.1和HTTP 2.0的区别</h5><p><a href=\"https://www.cnblogs.com/heluan/p/8620312.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h5><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。<br>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></li><li><h5 id=\"HTTP的请求报文和响应报文\"><a href=\"#HTTP的请求报文和响应报文\" class=\"headerlink\" title=\"HTTP的请求报文和响应报文\"></a>HTTP的请求报文和响应报文</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfb5j.jpg\" alt=\"请求报文\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfzrT.jpg\" alt=\"响应报文\"></p></li><li><h5 id=\"一次完整的HTTP请求过程\"><a href=\"#一次完整的HTTP请求过程\" class=\"headerlink\" title=\"一次完整的HTTP请求过程\"></a>一次完整的HTTP请求过程</h5><ol><li>域名解析<ol><li>首先搜索浏览器自身的DNS缓存</li><li>如果浏览器自身缓存没有，就搜索系统自身的缓存</li><li>如果系统自身的缓存没有，就搜索host文件</li><li>如果host文件没有，则向本地配置的DNS服务器发起域名解析请求（本地域名服务器）</li><li>如果本地域名服务器依旧没有找到，就会有递归和迭代两种方法解析<ol><li>迭代：<br>a. 本地域名服务器想根域名服务器发起请求<br>b. 根域名服务器返回给本地域名服务器我们该向哪个顶级域名去请求<br>c. 顶级域名服务器想权限域名服务器发请求<br>d. 返回本地域名服务器IP地址<br>e5. 返回给系统内核，最后返回给浏览器</li><li>递归：<br>a. 本地域名服务器向根域名服务器发请求<br>b. 之后根域名服务器向顶级域名服务器去找<br>c. 顶级域名服务器返回给根域名服务器<br>d. 根域名服务器返回给本地服务器<br>e. 返回给系统，最后返回给浏览器</li></ol></li></ol></li><li>TCP连接</li><li>发起HTTP请求</li><li>服务器响应HTTP请求，同时浏览器得到HTML代码</li><li>浏览器解析HTML代码，并请求HTML代码中的资源</li><li>浏览器将页面渲染给用户</li></ol></li><li><h5 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h5><p>GET是将请求的数据和header一并发送给服务器，只发送一次TCP包<br>POST是先发送header给服务器，然后服务器返回100，再将数据发送给服务器，发送了两次TCP包</p></li><li><h5 id=\"TCP三次握手和四次挥手\"><a href=\"#TCP三次握手和四次挥手\" class=\"headerlink\" title=\"TCP三次握手和四次挥手\"></a>TCP三次握手和四次挥手</h5></li><li><h5 id=\"TIME-WAIT的原因\"><a href=\"#TIME-WAIT的原因\" class=\"headerlink\" title=\"TIME_WAIT的原因\"></a>TIME_WAIT的原因</h5><p>发生在主动请求关闭的一方</p></li><li><h5 id=\"TCP和UDP的区别\"><a href=\"#TCP和UDP的区别\" class=\"headerlink\" title=\"TCP和UDP的区别\"></a>TCP和UDP的区别</h5><ol><li>TCP面向连接，UDP无连接</li><li>TCP提供可靠服务，UDP不保证可靠交付</li><li>UDP有较好的实时性</li><li>TCP只支持点到点通信，UDP支持一对一，一对多，多对一和多对多通信</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少</li><li>TCP数据容易发生粘包</li></ol></li><li><h5 id=\"TCP的粘包\"><a href=\"#TCP的粘包\" class=\"headerlink\" title=\"TCP的粘包\"></a>TCP的粘包</h5><ol><li>发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。</li><li>接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。</li><li>解决办法就是封包、拆包。给一段数据加上包头,这样一来数据包就分为包头和包体两部分内容了(以后讲过滤非法包时封包会加入”包尾”内容)。包头其实上是个大小固定的结构体，其中有个结构体成员变量表示包体的长度，这是个很重要的变量，其他的结构体成员可根据需要自己定义。根据包头长度固定以及包头中含有包体长度的变量就能正确的拆分出一个完整的数据包。</li></ol></li><li><h5 id=\"select、poll和epoll的区别\"><a href=\"#select、poll和epoll的区别\" class=\"headerlink\" title=\"select、poll和epoll的区别\"></a>select、poll和epoll的区别</h5><p>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</p><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p><p>缺点：</p><ol><li>select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024</li><li>对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。</li><li>需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</li></ol><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。 poll没有最大连接数的限制，因为它是采用链表来存储的</p><p>缺点：</p><ol><li>大量的fd的数组被整体复制于用户态和内核地址空间之间，对于系统的开销比较大</li><li>poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</li></ol><p><strong>注意</strong>：从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p><p>相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。</p><p>优点：</p><ol><li>没有最大并发连接的限制</li><li>效率提升，不是轮询的方式，不会随着FD数目的增加效率下降</li><li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</li></ol><p>在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符， 一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。 (此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在）</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhFi9.jpg\" alt=\"支持一个进程所能打开的最大连接数\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhuZD.jpg\" alt=\"FD剧增后带来的IO效率问题\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhMIH.jpg\" alt=\"消息传递方式\"></p><p>综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：</p><p>1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。<br>2、select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善。</p></li><li><h5 id=\"几种排序\"><a href=\"#几种排序\" class=\"headerlink\" title=\"几种排序\"></a>几种排序</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhadg.jpg\" alt=\"排序\"></p><p><a href=\"https://www.cnblogs.com/fwl8888/p/9315730.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h5></li><li><h5 id=\"栈，队列\"><a href=\"#栈，队列\" class=\"headerlink\" title=\"栈，队列\"></a>栈，队列</h5></li><li><h5 id=\"完全二叉树，平衡二叉树，红黑树，B树，B-树，二叉搜索树\"><a href=\"#完全二叉树，平衡二叉树，红黑树，B树，B-树，二叉搜索树\" class=\"headerlink\" title=\"完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树\"></a>完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树</h5><p><a href=\"https://blog.csdn.net/jacke121/article/details/78268602\" target=\"_blank\" rel=\"noopener\">平衡二叉树</a></p><p><a href=\"https://www.cnblogs.com/yyxt/p/4983967.html\" target=\"_blank\" rel=\"noopener\">红黑树</a></p><p><a href=\"https://blog.csdn.net/z_ryan/article/details/79685072\" target=\"_blank\" rel=\"noopener\">B树，B+树</a></p></li><li><h5 id=\"进程间的通信方式\"><a href=\"#进程间的通信方式\" class=\"headerlink\" title=\"进程间的通信方式\"></a>进程间的通信方式</h5><p>消息队列，信号量，管道，共享内存，Socket</p><p><a href=\"https://www.cnblogs.com/zgq0/p/8780893.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"进程程的状态\"><a href=\"#进程程的状态\" class=\"headerlink\" title=\"进程程的状态\"></a>进程程的状态</h5><p>就绪，运行，阻塞</p><p><a href=\"https://www.cnblogs.com/zxf98/p/5716296.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p><a href=\"https://blog.csdn.net/wh211212/article/details/53208960\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"网络七层协议，五层协议，TCP-IP四层协议\"><a href=\"#网络七层协议，五层协议，TCP-IP四层协议\" class=\"headerlink\" title=\"网络七层协议，五层协议，TCP/IP四层协议\"></a>网络七层协议，五层协议，TCP/IP四层协议</h5><p>七层：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层<br>五层：物理层，数据链路层，网络层，传输层，应用层<br>四层：网络接口层，网络层，传输层，应用层</p><p><a href=\"https://blog.csdn.net/cc1949/article/details/79063439\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"RESRful\"><a href=\"#RESRful\" class=\"headerlink\" title=\"RESRful\"></a>RESRful</h5><ol><li>使用HTTPS</li><li>API域名和版本号</li><li>HTTP动词，GET、DELETE、PUT、POST</li><li>过滤，排序，搜索，分页</li><li>状态码和文字说明</li><li><p>文档</p><p><a href=\"https://blog.csdn.net/u013007900/article/details/79875287\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li></ol></li><li><h5 id=\"MVVC\"><a href=\"#MVVC\" class=\"headerlink\" title=\"MVVC\"></a>MVVC</h5><p>多版本并发控制</p><p><a href=\"https://www.cnblogs.com/hirampeng/p/9944200.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Ping用的什么协议\"><a href=\"#Ping用的什么协议\" class=\"headerlink\" title=\"Ping用的什么协议\"></a>Ping用的什么协议</h5><p>ICMP 网络控制消息协议</p></li><li><h5 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h5><p>堆(heap): 父节点的值大于子节点的值的完全二叉树</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhWo4.jpg\" alt=\"求第i个节点的父子节点\"></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heapify</span><span class=\"params\">(alist, n, i)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &gt;= n:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    c1 = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    c2 = <span class=\"number\">2</span> * i + <span class=\"number\">2</span></span><br><span class=\"line\">    max_index = i</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c1 &lt; n <span class=\"keyword\">and</span> alist[c1] &gt; alist[max_index]:</span><br><span class=\"line\">        max_index = c1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c2 &lt; n <span class=\"keyword\">and</span> alist[c2] &gt; alist[max_index]:</span><br><span class=\"line\">        max_index = c2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> max_index != i:</span><br><span class=\"line\">        alist[i], alist[max_index] = alist[max_index], alist[i]</span><br><span class=\"line\">        heapify(alist, n, max_index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_heap</span><span class=\"params\">(alist, n)</span>:</span></span><br><span class=\"line\">    last_node = n - <span class=\"number\">1</span></span><br><span class=\"line\">    last_node_parent = n//<span class=\"number\">2</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(last_node_parent, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        heapify(alist, n, i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(alist, n)</span>:</span></span><br><span class=\"line\">    build_heap(alist, n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        alist[i], alist[<span class=\"number\">0</span>] = alist[<span class=\"number\">0</span>], alist[i]</span><br><span class=\"line\">        heapify(alist, i, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>整理了自己在Python后台开发求职面试过程中的一些面试题，基本涵盖了Python的基础知识，数据库知识，HTTP协议相关，以及基础的数据结构与算法。也方便自己后续面试的时候回来复习。<br>","more":"</p><ol><li><h5 id=\"Python的单例\"><a href=\"#Python的单例\" class=\"headerlink\" title=\"Python的单例\"></a>Python的单例</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用__new__来实现单例\"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, <span class=\"string\">'_instance'</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton,cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用装饰器\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Singleton</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> func <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[func] = func(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[func]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myclass</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"使用模块\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># singleton.py</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">singleton = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将上边的代码保存为一个模块，然后可以在别的模块中引用</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> singleton <span class=\"keyword\">import</span> singleton</span><br><span class=\"line\"></span><br><span class=\"line\">singleton.foo()</span><br></pre></td></tr></table></figure></li><li><h5 id=\"Python的垃圾回收机制\"><a href=\"#Python的垃圾回收机制\" class=\"headerlink\" title=\"Python的垃圾回收机制\"></a>Python的垃圾回收机制</h5><p>Python中的垃圾回收机制主要以<code>引用计数</code>为主，<code>标记-清除</code>和<code>分代回收</code>为辅。<br><code>引用计数</code>的缺点：1. 维护引用计数消耗资源。2. 循环引用问题<br><code>标记-清除</code>：分为两个阶段，第一阶段是标记阶段，把所有的活动对象打上标记；第二阶段把没有被标记的对象进行回收。 从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。在下图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记， 而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。<br>缺点就是清除非活动对象前必须扫描整个堆内存。</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfaCR.jpg\" alt=\"标记清除原理\"></p><p><code>分代回收</code>：Python将内存根据生存时间划分为不同的集合，每个集合称为一个代。一共有三代，分别为年轻代（第0代），中年代（第1代），老年代（第2代）， 新创建的对象都被分在第0代，当第0代链表数达到上限，Python的垃圾回收机制就会被触发，把那些可以被回收的对象回收掉，不会被回收的就被移到第1代，以此类推。第2代中的对象就是存活时间最长的对象。</p></li><li><h5 id=\"Python的生成器、迭代器\"><a href=\"#Python的生成器、迭代器\" class=\"headerlink\" title=\"Python的生成器、迭代器\"></a>Python的生成器、迭代器</h5><p>生成器节约内存，需要的时候才产生结果，而不是立即产生。<br>Python中有两种创建生成器的方式：第一种将列表推导式的方括号[]改成圆括号()；第二种是生成器函数，带有yield关键字的函数，使用yield返回值而不是return。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"生成器表达式\"\"\"</span></span><br><span class=\"line\">ge = (i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>))</span><br><span class=\"line\">print(ge)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ge:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"string\">\"\"\"结果\"\"\"</span></span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x02D5FE70</span>&gt;</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">生成器函数</span></span><br><span class=\"line\"><span class=\"string\">使用生成器函数实现斐波那切数列</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    a, b, count = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> count &lt; n:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Done\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(fib(<span class=\"number\">5</span>))   </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> fib(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">          </span><br><span class=\"line\"><span class=\"string\">\"\"\"输出结果\"\"\"</span></span><br><span class=\"line\">&lt;generator object fib at <span class=\"number\">0x0376FE70</span>&gt;</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>生成器有__next__()和send()两个方法。f.__next__()和next(f)作用都是一样的，打印生成器的下一个结果。send()主要用来向生成器中导入参数。在调用send()方法前需要至少调用一次next()或者有__next__()方法。也可以使用send(None)来实现对生成器函数的预激</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    value = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        temp = <span class=\"keyword\">yield</span> value</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp == <span class=\"string\">'e'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        value = <span class=\"string\">\"got %s\"</span> % temp</span><br><span class=\"line\">    </span><br><span class=\"line\">t = test()</span><br><span class=\"line\">print(t.__next__()) <span class=\"comment\"># 或者print(next(t))  再或者 print(t.send(None))</span></span><br><span class=\"line\">t.send(<span class=\"string\">\"hhh\"</span>)</span><br><span class=\"line\">t.send(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">t.send(<span class=\"string\">\"e\"</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"运行结果\"\"\"</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">get hhh</span><br><span class=\"line\">get aaa</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"test.py\"</span>, line <span class=\"number\">14</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    print(t.send(<span class=\"string\">\"e\"</span>))</span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：需要注意的一点是在使用<code>yield from</code>的时候会自动预激</p></li><li><h5 id=\"Python的多线程、多进程、协程\"><a href=\"#Python的多线程、多进程、协程\" class=\"headerlink\" title=\"Python的多线程、多进程、协程\"></a>Python的多线程、多进程、协程</h5></li><li><h5 id=\"Python的作用域\"><a href=\"#Python的作用域\" class=\"headerlink\" title=\"Python的作用域\"></a>Python的作用域</h5></li><li><h5 id=\"yield-和-yield-from\"><a href=\"#yield-和-yield-from\" class=\"headerlink\" title=\"yield 和 yield from\"></a>yield 和 yield from</h5><p><a href=\"https://www.cnblogs.com/wongbingming/p/9085268.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Python中的锁\"><a href=\"#Python中的锁\" class=\"headerlink\" title=\"Python中的锁\"></a>Python中的锁</h5><p><a href=\"https://www.cnblogs.com/wongbingming/p/9035575.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Python的闭包，装饰器\"><a href=\"#Python的闭包，装饰器\" class=\"headerlink\" title=\"Python的闭包，装饰器\"></a>Python的闭包，装饰器</h5></li><li><h5 id=\"init-和-new\"><a href=\"#init-和-new\" class=\"headerlink\" title=\"__init__ 和 __new__\"></a>__init__ 和 __new__</h5></li><li><h5 id=\"args-和-kwages\"><a href=\"#args-和-kwages\" class=\"headerlink\" title=\"*args`和 **kwages\"></a>*args`和 **kwages</h5></li><li><h5 id=\"数据库中的锁\"><a href=\"#数据库中的锁\" class=\"headerlink\" title=\"数据库中的锁\"></a>数据库中的锁</h5><p>乐观锁和悲观锁</p></li><li><h5 id=\"数据库中的join\"><a href=\"#数据库中的join\" class=\"headerlink\" title=\"数据库中的join\"></a>数据库中的join</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg\" alt=\"\"></p><p><a href=\"https://blog.csdn.net/liitdar/article/details/80817087\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"MySQL的存储引擎\"><a href=\"#MySQL的存储引擎\" class=\"headerlink\" title=\"MySQL的存储引擎\"></a>MySQL的存储引擎</h5><p>InnoDB和MyISAM</p></li><li><h5 id=\"数据库的事务\"><a href=\"#数据库的事务\" class=\"headerlink\" title=\"数据库的事务\"></a>数据库的事务</h5><p><a href=\"https://www.cnblogs.com/xrq730/p/5087378.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"数据库的索引\"><a href=\"#数据库的索引\" class=\"headerlink\" title=\"数据库的索引\"></a>数据库的索引</h5><p>分为单行索引和组合索引。其中单行索引又分为普通索引、主键索引（不允许为空，唯一）和 唯一索引（可以为空，但唯一）<br><a href=\"https://www.cnblogs.com/wuchanming/p/6886020.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Redis的数据持久化（AOF和RDB\"><a href=\"#Redis的数据持久化（AOF和RDB\" class=\"headerlink\" title=\"Redis的数据持久化（AOF和RDB)\"></a>Redis的数据持久化（AOF和RDB)</h5></li><li><h5 id=\"HTTP-1-0、HTTP-1-1和HTTP-2-0的区别\"><a href=\"#HTTP-1-0、HTTP-1-1和HTTP-2-0的区别\" class=\"headerlink\" title=\"HTTP 1.0、HTTP 1.1和HTTP 2.0的区别\"></a>HTTP 1.0、HTTP 1.1和HTTP 2.0的区别</h5><p><a href=\"https://www.cnblogs.com/heluan/p/8620312.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h5><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。<br>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></li><li><h5 id=\"HTTP的请求报文和响应报文\"><a href=\"#HTTP的请求报文和响应报文\" class=\"headerlink\" title=\"HTTP的请求报文和响应报文\"></a>HTTP的请求报文和响应报文</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfb5j.jpg\" alt=\"请求报文\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfzrT.jpg\" alt=\"响应报文\"></p></li><li><h5 id=\"一次完整的HTTP请求过程\"><a href=\"#一次完整的HTTP请求过程\" class=\"headerlink\" title=\"一次完整的HTTP请求过程\"></a>一次完整的HTTP请求过程</h5><ol><li>域名解析<ol><li>首先搜索浏览器自身的DNS缓存</li><li>如果浏览器自身缓存没有，就搜索系统自身的缓存</li><li>如果系统自身的缓存没有，就搜索host文件</li><li>如果host文件没有，则向本地配置的DNS服务器发起域名解析请求（本地域名服务器）</li><li>如果本地域名服务器依旧没有找到，就会有递归和迭代两种方法解析<ol><li>迭代：<br>a. 本地域名服务器想根域名服务器发起请求<br>b. 根域名服务器返回给本地域名服务器我们该向哪个顶级域名去请求<br>c. 顶级域名服务器想权限域名服务器发请求<br>d. 返回本地域名服务器IP地址<br>e5. 返回给系统内核，最后返回给浏览器</li><li>递归：<br>a. 本地域名服务器向根域名服务器发请求<br>b. 之后根域名服务器向顶级域名服务器去找<br>c. 顶级域名服务器返回给根域名服务器<br>d. 根域名服务器返回给本地服务器<br>e. 返回给系统，最后返回给浏览器</li></ol></li></ol></li><li>TCP连接</li><li>发起HTTP请求</li><li>服务器响应HTTP请求，同时浏览器得到HTML代码</li><li>浏览器解析HTML代码，并请求HTML代码中的资源</li><li>浏览器将页面渲染给用户</li></ol></li><li><h5 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h5><p>GET是将请求的数据和header一并发送给服务器，只发送一次TCP包<br>POST是先发送header给服务器，然后服务器返回100，再将数据发送给服务器，发送了两次TCP包</p></li><li><h5 id=\"TCP三次握手和四次挥手\"><a href=\"#TCP三次握手和四次挥手\" class=\"headerlink\" title=\"TCP三次握手和四次挥手\"></a>TCP三次握手和四次挥手</h5></li><li><h5 id=\"TIME-WAIT的原因\"><a href=\"#TIME-WAIT的原因\" class=\"headerlink\" title=\"TIME_WAIT的原因\"></a>TIME_WAIT的原因</h5><p>发生在主动请求关闭的一方</p></li><li><h5 id=\"TCP和UDP的区别\"><a href=\"#TCP和UDP的区别\" class=\"headerlink\" title=\"TCP和UDP的区别\"></a>TCP和UDP的区别</h5><ol><li>TCP面向连接，UDP无连接</li><li>TCP提供可靠服务，UDP不保证可靠交付</li><li>UDP有较好的实时性</li><li>TCP只支持点到点通信，UDP支持一对一，一对多，多对一和多对多通信</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少</li><li>TCP数据容易发生粘包</li></ol></li><li><h5 id=\"TCP的粘包\"><a href=\"#TCP的粘包\" class=\"headerlink\" title=\"TCP的粘包\"></a>TCP的粘包</h5><ol><li>发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。</li><li>接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。</li><li>解决办法就是封包、拆包。给一段数据加上包头,这样一来数据包就分为包头和包体两部分内容了(以后讲过滤非法包时封包会加入”包尾”内容)。包头其实上是个大小固定的结构体，其中有个结构体成员变量表示包体的长度，这是个很重要的变量，其他的结构体成员可根据需要自己定义。根据包头长度固定以及包头中含有包体长度的变量就能正确的拆分出一个完整的数据包。</li></ol></li><li><h5 id=\"select、poll和epoll的区别\"><a href=\"#select、poll和epoll的区别\" class=\"headerlink\" title=\"select、poll和epoll的区别\"></a>select、poll和epoll的区别</h5><p>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</p><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p><p>缺点：</p><ol><li>select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024</li><li>对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。</li><li>需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</li></ol><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。 poll没有最大连接数的限制，因为它是采用链表来存储的</p><p>缺点：</p><ol><li>大量的fd的数组被整体复制于用户态和内核地址空间之间，对于系统的开销比较大</li><li>poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</li></ol><p><strong>注意</strong>：从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p><p>相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。</p><p>优点：</p><ol><li>没有最大并发连接的限制</li><li>效率提升，不是轮询的方式，不会随着FD数目的增加效率下降</li><li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</li></ol><p>在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符， 一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。 (此处去掉了遍历文件描述符，而是通过监听回调的的机制。这正是epoll的魅力所在）</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhFi9.jpg\" alt=\"支持一个进程所能打开的最大连接数\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhuZD.jpg\" alt=\"FD剧增后带来的IO效率问题\"></p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhMIH.jpg\" alt=\"消息传递方式\"></p><p>综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点：</p><p>1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。<br>2、select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善。</p></li><li><h5 id=\"几种排序\"><a href=\"#几种排序\" class=\"headerlink\" title=\"几种排序\"></a>几种排序</h5><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhadg.jpg\" alt=\"排序\"></p><p><a href=\"https://www.cnblogs.com/fwl8888/p/9315730.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h5></li><li><h5 id=\"栈，队列\"><a href=\"#栈，队列\" class=\"headerlink\" title=\"栈，队列\"></a>栈，队列</h5></li><li><h5 id=\"完全二叉树，平衡二叉树，红黑树，B树，B-树，二叉搜索树\"><a href=\"#完全二叉树，平衡二叉树，红黑树，B树，B-树，二叉搜索树\" class=\"headerlink\" title=\"完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树\"></a>完全二叉树，平衡二叉树，红黑树，B树，B+树，二叉搜索树</h5><p><a href=\"https://blog.csdn.net/jacke121/article/details/78268602\" target=\"_blank\" rel=\"noopener\">平衡二叉树</a></p><p><a href=\"https://www.cnblogs.com/yyxt/p/4983967.html\" target=\"_blank\" rel=\"noopener\">红黑树</a></p><p><a href=\"https://blog.csdn.net/z_ryan/article/details/79685072\" target=\"_blank\" rel=\"noopener\">B树，B+树</a></p></li><li><h5 id=\"进程间的通信方式\"><a href=\"#进程间的通信方式\" class=\"headerlink\" title=\"进程间的通信方式\"></a>进程间的通信方式</h5><p>消息队列，信号量，管道，共享内存，Socket</p><p><a href=\"https://www.cnblogs.com/zgq0/p/8780893.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"进程程的状态\"><a href=\"#进程程的状态\" class=\"headerlink\" title=\"进程程的状态\"></a>进程程的状态</h5><p>就绪，运行，阻塞</p><p><a href=\"https://www.cnblogs.com/zxf98/p/5716296.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p><a href=\"https://blog.csdn.net/wh211212/article/details/53208960\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"网络七层协议，五层协议，TCP-IP四层协议\"><a href=\"#网络七层协议，五层协议，TCP-IP四层协议\" class=\"headerlink\" title=\"网络七层协议，五层协议，TCP/IP四层协议\"></a>网络七层协议，五层协议，TCP/IP四层协议</h5><p>七层：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层<br>五层：物理层，数据链路层，网络层，传输层，应用层<br>四层：网络接口层，网络层，传输层，应用层</p><p><a href=\"https://blog.csdn.net/cc1949/article/details/79063439\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"RESRful\"><a href=\"#RESRful\" class=\"headerlink\" title=\"RESRful\"></a>RESRful</h5><ol><li>使用HTTPS</li><li>API域名和版本号</li><li>HTTP动词，GET、DELETE、PUT、POST</li><li>过滤，排序，搜索，分页</li><li>状态码和文字说明</li><li><p>文档</p><p><a href=\"https://blog.csdn.net/u013007900/article/details/79875287\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li></ol></li><li><h5 id=\"MVVC\"><a href=\"#MVVC\" class=\"headerlink\" title=\"MVVC\"></a>MVVC</h5><p>多版本并发控制</p><p><a href=\"https://www.cnblogs.com/hirampeng/p/9944200.html\" target=\"_blank\" rel=\"noopener\">具体讲解</a></p></li><li><h5 id=\"Ping用的什么协议\"><a href=\"#Ping用的什么协议\" class=\"headerlink\" title=\"Ping用的什么协议\"></a>Ping用的什么协议</h5><p>ICMP 网络控制消息协议</p></li><li><h5 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h5><p>堆(heap): 父节点的值大于子节点的值的完全二叉树</p><p><img src=\"https://s2.ax1x.com/2019/04/27/EKhWo4.jpg\" alt=\"求第i个节点的父子节点\"></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heapify</span><span class=\"params\">(alist, n, i)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &gt;= n:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    c1 = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    c2 = <span class=\"number\">2</span> * i + <span class=\"number\">2</span></span><br><span class=\"line\">    max_index = i</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c1 &lt; n <span class=\"keyword\">and</span> alist[c1] &gt; alist[max_index]:</span><br><span class=\"line\">        max_index = c1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c2 &lt; n <span class=\"keyword\">and</span> alist[c2] &gt; alist[max_index]:</span><br><span class=\"line\">        max_index = c2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> max_index != i:</span><br><span class=\"line\">        alist[i], alist[max_index] = alist[max_index], alist[i]</span><br><span class=\"line\">        heapify(alist, n, max_index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_heap</span><span class=\"params\">(alist, n)</span>:</span></span><br><span class=\"line\">    last_node = n - <span class=\"number\">1</span></span><br><span class=\"line\">    last_node_parent = n//<span class=\"number\">2</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(last_node_parent, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        heapify(alist, n, i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(alist, n)</span>:</span></span><br><span class=\"line\">    build_heap(alist, n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        alist[i], alist[<span class=\"number\">0</span>] = alist[<span class=\"number\">0</span>], alist[i]</span><br><span class=\"line\">        heapify(alist, i, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->"},{"title":"macOS下给VScode安装Golang插件","date":"2019-04-06T05:33:55.000Z","_content":"最近学习Golang，IDE选择了VScode，主要原因是VScode轻巧还有丰富的各种插件。但是在配置好环境之后，vscode提示我安装插件，却一直安装失败，在折腾了好久之后终于算是安装成功了，所以记录一下。\n<!--more-->\n这里不讲具体的Golang和VScode的具体安装过程，需要的可以百度其他博客的讲解。这里直接讲解如何安装其他插件。  \n\n切换到`GOPATH`路径下  \n\n```bash\ncd $GOPATH/src\n```\n\n然后在src文件夹下新建两个文件夹以及子文件夹    \n```bash\nsudo mkdir -p github.com/golang\nsudo mkdir -p golang.org/x\n```\n\n克隆GitHub上的tools工具包:  \n```bash\ncd $GOPATH/src/github.com/golang\ngit clone https://github.com/golang/tools.git tools\n```\n再将`tools`文件夹拷贝到`golang.org/x`文件夹下:  \n```bash\n# 首先在golang.org/x下新建一个tools的文件夹\nmkdir %GOPATH/src/golang.org/x/tools\n\n# 然后把刚刚下载的tools工具包下的文件都拷贝过去\ncp -r $GOPATH/src/github.com/golang/tools/ $GOPATH/src/golang.org/x/tools/\n```\n然后返回到`$GOPATH`目录下，执行`go install`命令即可。  \n```bash\ncd $GOPATH\ngo install github.com/ramya-rao-a/go-outline\ngo install github.com/acroca/go-symbols\ngo install golang.org/x/tools/cmd/guru\ngo install golang.org/x/tools/cmd/gorename\ngo install github.com/josharian/impl\ngo install github.com/rogpeppe/godef\ngo install github.com/sqs/goreturns\ngo install github.com/golang/lint/golint\ngo install github.com/cweill/gotests/gotests\ngo install github.com/ramya-rao-a/go-outline\ngo install github.com/acroca/go-symbols\ngo install golang.org/x/tools/cmd/guru\ngo install golang.org/x/tools/cmd/gorename\ngo install github.com/josharian/impl\ngo install github.com/rogpeppe/godef\ngo install github.com/sqs/goreturns\ngo install github.com/cweill/gotests/gotests\n```\n可能还会提示`golint`安装失败，是因为`golint`在`tools`里不包括，单独下载下来安装就可以了  \n```bash\ncd $GOPATH/src/golang.org/x\ngit clone https://github.com/golang/lint.git\n\n# 返回#GOPATH目录\ngo install golang.org\\x\\lint\\golint\n```\n至此，所有的插件都安装完成。\n\n\n","source":"_posts/macOS下给VScode安装Golang插件.md","raw":"---\ntitle: macOS下给VScode安装Golang插件\ndate: 2019-04-06 13:33:55\ncategories: 编程\ntags:\n    - Golang\n---\n最近学习Golang，IDE选择了VScode，主要原因是VScode轻巧还有丰富的各种插件。但是在配置好环境之后，vscode提示我安装插件，却一直安装失败，在折腾了好久之后终于算是安装成功了，所以记录一下。\n<!--more-->\n这里不讲具体的Golang和VScode的具体安装过程，需要的可以百度其他博客的讲解。这里直接讲解如何安装其他插件。  \n\n切换到`GOPATH`路径下  \n\n```bash\ncd $GOPATH/src\n```\n\n然后在src文件夹下新建两个文件夹以及子文件夹    \n```bash\nsudo mkdir -p github.com/golang\nsudo mkdir -p golang.org/x\n```\n\n克隆GitHub上的tools工具包:  \n```bash\ncd $GOPATH/src/github.com/golang\ngit clone https://github.com/golang/tools.git tools\n```\n再将`tools`文件夹拷贝到`golang.org/x`文件夹下:  \n```bash\n# 首先在golang.org/x下新建一个tools的文件夹\nmkdir %GOPATH/src/golang.org/x/tools\n\n# 然后把刚刚下载的tools工具包下的文件都拷贝过去\ncp -r $GOPATH/src/github.com/golang/tools/ $GOPATH/src/golang.org/x/tools/\n```\n然后返回到`$GOPATH`目录下，执行`go install`命令即可。  \n```bash\ncd $GOPATH\ngo install github.com/ramya-rao-a/go-outline\ngo install github.com/acroca/go-symbols\ngo install golang.org/x/tools/cmd/guru\ngo install golang.org/x/tools/cmd/gorename\ngo install github.com/josharian/impl\ngo install github.com/rogpeppe/godef\ngo install github.com/sqs/goreturns\ngo install github.com/golang/lint/golint\ngo install github.com/cweill/gotests/gotests\ngo install github.com/ramya-rao-a/go-outline\ngo install github.com/acroca/go-symbols\ngo install golang.org/x/tools/cmd/guru\ngo install golang.org/x/tools/cmd/gorename\ngo install github.com/josharian/impl\ngo install github.com/rogpeppe/godef\ngo install github.com/sqs/goreturns\ngo install github.com/cweill/gotests/gotests\n```\n可能还会提示`golint`安装失败，是因为`golint`在`tools`里不包括，单独下载下来安装就可以了  \n```bash\ncd $GOPATH/src/golang.org/x\ngit clone https://github.com/golang/lint.git\n\n# 返回#GOPATH目录\ngo install golang.org\\x\\lint\\golint\n```\n至此，所有的插件都安装完成。\n\n\n","slug":"macOS下给VScode安装Golang插件","published":1,"updated":"2019-04-06T05:38:38.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy8tn16w0003m6ww568o2yyz","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>最近学习Golang，IDE选择了VScode，主要原因是VScode轻巧还有丰富的各种插件。但是在配置好环境之后，vscode提示我安装插件，却一直安装失败，在折腾了好久之后终于算是安装成功了，所以记录一下。<br><a id=\"more\"></a><br>这里不讲具体的Golang和VScode的具体安装过程，需要的可以百度其他博客的讲解。这里直接讲解如何安装其他插件。</p><p>切换到<code>GOPATH</code>路径下</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src</span><br></pre></td></tr></table></figure><p>然后在src文件夹下新建两个文件夹以及子文件夹<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p github.com/golang</span><br><span class=\"line\">sudo mkdir -p golang.org/x</span><br></pre></td></tr></table></figure><p></p><p>克隆GitHub上的tools工具包:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/github.com/golang</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/golang/tools.git tools</span><br></pre></td></tr></table></figure><p></p><p>再将<code>tools</code>文件夹拷贝到<code>golang.org/x</code>文件夹下:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先在golang.org/x下新建一个tools的文件夹</span></span><br><span class=\"line\">mkdir %GOPATH/src/golang.org/x/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后把刚刚下载的tools工具包下的文件都拷贝过去</span></span><br><span class=\"line\">cp -r <span class=\"variable\">$GOPATH</span>/src/github.com/golang/tools/ <span class=\"variable\">$GOPATH</span>/src/golang.org/x/tools/</span><br></pre></td></tr></table></figure><p></p><p>然后返回到<code>$GOPATH</code>目录下，执行<code>go install</code>命令即可。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span></span><br><span class=\"line\">go install github.com/ramya-rao<span class=\"_\">-a</span>/go-outline</span><br><span class=\"line\">go install github.com/acroca/go-symbols</span><br><span class=\"line\">go install golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go install golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go install github.com/josharian/impl</span><br><span class=\"line\">go install github.com/rogpeppe/godef</span><br><span class=\"line\">go install github.com/sqs/goreturns</span><br><span class=\"line\">go install github.com/golang/lint/golint</span><br><span class=\"line\">go install github.com/cweill/gotests/gotests</span><br><span class=\"line\">go install github.com/ramya-rao<span class=\"_\">-a</span>/go-outline</span><br><span class=\"line\">go install github.com/acroca/go-symbols</span><br><span class=\"line\">go install golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go install golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go install github.com/josharian/impl</span><br><span class=\"line\">go install github.com/rogpeppe/godef</span><br><span class=\"line\">go install github.com/sqs/goreturns</span><br><span class=\"line\">go install github.com/cweill/gotests/gotests</span><br></pre></td></tr></table></figure><p></p><p>可能还会提示<code>golint</code>安装失败，是因为<code>golint</code>在<code>tools</code>里不包括，单独下载下来安装就可以了<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/golang.org/x</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/golang/lint.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回#GOPATH目录</span></span><br><span class=\"line\">go install golang.org\\x\\lint\\golint</span><br></pre></td></tr></table></figure><p></p><p>至此，所有的插件都安装完成。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>最近学习Golang，IDE选择了VScode，主要原因是VScode轻巧还有丰富的各种插件。但是在配置好环境之后，vscode提示我安装插件，却一直安装失败，在折腾了好久之后终于算是安装成功了，所以记录一下。<br>","more":"<br>这里不讲具体的Golang和VScode的具体安装过程，需要的可以百度其他博客的讲解。这里直接讲解如何安装其他插件。</p><p>切换到<code>GOPATH</code>路径下</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src</span><br></pre></td></tr></table></figure><p>然后在src文件夹下新建两个文件夹以及子文件夹<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p github.com/golang</span><br><span class=\"line\">sudo mkdir -p golang.org/x</span><br></pre></td></tr></table></figure><p></p><p>克隆GitHub上的tools工具包:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/github.com/golang</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/golang/tools.git tools</span><br></pre></td></tr></table></figure><p></p><p>再将<code>tools</code>文件夹拷贝到<code>golang.org/x</code>文件夹下:<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先在golang.org/x下新建一个tools的文件夹</span></span><br><span class=\"line\">mkdir %GOPATH/src/golang.org/x/tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后把刚刚下载的tools工具包下的文件都拷贝过去</span></span><br><span class=\"line\">cp -r <span class=\"variable\">$GOPATH</span>/src/github.com/golang/tools/ <span class=\"variable\">$GOPATH</span>/src/golang.org/x/tools/</span><br></pre></td></tr></table></figure><p></p><p>然后返回到<code>$GOPATH</code>目录下，执行<code>go install</code>命令即可。<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span></span><br><span class=\"line\">go install github.com/ramya-rao<span class=\"_\">-a</span>/go-outline</span><br><span class=\"line\">go install github.com/acroca/go-symbols</span><br><span class=\"line\">go install golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go install golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go install github.com/josharian/impl</span><br><span class=\"line\">go install github.com/rogpeppe/godef</span><br><span class=\"line\">go install github.com/sqs/goreturns</span><br><span class=\"line\">go install github.com/golang/lint/golint</span><br><span class=\"line\">go install github.com/cweill/gotests/gotests</span><br><span class=\"line\">go install github.com/ramya-rao<span class=\"_\">-a</span>/go-outline</span><br><span class=\"line\">go install github.com/acroca/go-symbols</span><br><span class=\"line\">go install golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go install golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go install github.com/josharian/impl</span><br><span class=\"line\">go install github.com/rogpeppe/godef</span><br><span class=\"line\">go install github.com/sqs/goreturns</span><br><span class=\"line\">go install github.com/cweill/gotests/gotests</span><br></pre></td></tr></table></figure><p></p><p>可能还会提示<code>golint</code>安装失败，是因为<code>golint</code>在<code>tools</code>里不包括，单独下载下来安装就可以了<br></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/golang.org/x</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/golang/lint.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回#GOPATH目录</span></span><br><span class=\"line\">go install golang.org\\x\\lint\\golint</span><br></pre></td></tr></table></figure><p></p><p>至此，所有的插件都安装完成。</p><!-- rebuild by neat -->"},{"title":"SQLAchemy中处理两张表之间存在多个外键的情况","date":"2019-01-24T15:51:17.000Z","_content":"在Flask的开发中，我们势必会遇到两张表之间存在多个外键的情况。例如，现在有两张表，一张表是`User`，另一张表是`Article`。一篇文章的作者`author_id`可以设置外键关联`User`表，同时文章的审稿人`reviewer_id`也可以设置外键关联`User`表。当我们以SQLAchemy多对一(many to one)的设计方法来添加`relationship`关系映射时，程序会抛出一个`AmbiguousForeignKeysError`错误，这篇文章我们就来解决这个问题。\n<!--more-->\n### 出现Error的代码写法 \n先来看以SQLAchemy多对一的常规设计方法处理这个问题时我的代码写法。  \n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)  \n    email = db.Column(db.String(64), nullable=False, unique=True)  \n    name = db.Column(db.String(32), nullable=False)  \n    ...  \n    \nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id = db.Column(db.Integer, primary_key=True)  \n    title = db.Column(db.String(64), nullable=False) \n    author_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    reviewer_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    author = db.relationship('User', backref='articles')  \n    reviewer = db.relationship('User', backref='review_articles')  \n```\n\n\n看起来程序的设计应该是没问题，可运行的结果真的跟我们预想的一样吗？  \n当我们运行代码后，程序抛出了一个错误：  \n\n```\nsqlalchemy.exc.AmbiguousForeignKeysError: \nCould not determine join condition between parent/child tables on relationship Article.author \n- there are multiple foreign key paths linking the tables.  \nSpecify the 'foreign_keys' argument, providing a list of those columns \nwhich should be counted as containing a foreign key reference to the parent table. \n```\n\n可以看到SQLAchemy提示无法确定`Article.author`的父子表之间的关联，原因在于两张表之间存在多个外键。需要我们指定`foreign_keys`参数，提供一个包含关联了父表（即`User`表）外键的字段列表（`list`)  \n\n### 解决办法  \n\n查询了很多博客资料后这个问题依旧没有得到解决，只好去阅读[SQLAchemy的官方文档](https://docs.sqlalchemy.org/en/latest/index.html)，在SQLAchemy ORM > Relationship Configuation > Configuring how Relationship Joins下有关于[Handling Multiple Join Paths](https://docs.sqlalchemy.org/en/latest/orm/join_conditions.html#handling-multiple-join-paths)的介绍。  \n\n文档中说，在遇到两表之间存在多外键关联时，需要给`relationship()`指定`foreign_keys`参数。需要对我们的代码进行修改，添加`foreign_keys`参数，所以将代码修改为：  \n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)  \n    email = db.Column(db.String(64), nullable=False, unique=True)  \n    name = db.Column(db.String(32), nullable=False)  \n    ...\n\n    def __repr__(self):\n        return '<User id={0}, name={1}>'.format(self.id, self.name)  \n    \nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id = db.Column(db.Integer, primary_key=True)  \n    title = db.Column(db.String(64), nullable=False) \n    author_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    reviewer_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    author = db.relationship('User', backref='articles', foreign_keys=[author_id])  \n    reviewer = db.relationship('User', backref='review_articles', foreign_keys=[reviewer_id])\n\n    def __repr__(self):\n        return '<Article id={0}, title={1}>'.format(self.id, self.title)     \n```\n\n\n同时，在指定`foreign_keys`时，我们也可以使用字符串来指定。但如果使用列表，则列表必须是字符串的一部分。  \n\n```python\nauthor = db.relationship('User', backref='articles', foreign_keys=\"[author_id]\")\n```\n\n\n在我们这个具体的例子中，不需要列表，所以可以写成： \n\n\n```python\nauthor = db.relationship('User', backref='articles', foreign_keys=\"author_id\")\n```\n\n\n### 测试  \n\n在修改过后，我们运行程序，测试一下代码  \n我们先给`User`表添加两条数据   \n\n\n```\n>>> zhangsan = User(email='zhangsan@123.com', name='张三')\n>>> lisi = User(emaill='lisi@123.com', name='李四')\n>>> db.session.add_all([zhangsan,lisi])\n>>> db.session.commit()\n```\n\n\n接着给`Article`表添加一条记录，指定`Author`为`张三(users.id=1)`，`Reviewer`为`李四(users.id=2)`   \n\n\n```\n>>> article = Article()\n>>> article.title = \"Test\"\n>>> article.author_id = 1\n>>> article.reviewer_id = 2\n>>> db.session.add(article)\n>>> db.session.commit()\n```\n\n\n\n我们来做查询操作  \n\n\n```\n>>> article = Article.query.get(1)\n>>> article\n<Article id=1, title=Test>\n>>> article.author\n<User id=1, name=张三>\n>>> article.reviewer\n<User id=2, name=李四>\n```\n\n\n可以看到我们可以正确的查询到`article.author`和`article.reviewer`，关于[SQLAchemy中处理两张表之间存在多个外键的情况]()这个问题我们已经解决。  \n\n### 扩展  \n\n\n在`relationship()`中我们添加了`backref`参数来对关系提供反向引用，这样更加方便了我们的查询操作。示例： \n\n\n```\n>>> zhangsan = User.query.filter_by(name='张三').first()\n>>> zhangsan\n<User id=1, name=张三>\n>>> zhangsan.articles\n[<Article id=1, title=Test>]\n>>> zhangsan.review_articles\n[]\n```\n\n\n因为我们给`artice.author`添加了`articles`的反向引用，给`article.reviewer`添加了`review_articles`的反向引用。  \n所以对于`User 张三`来说，他是`article Test`的`Author`，可以通过`article.author`来查询得到`张三`。也可以通过`zhangsan.articles`反向查询得到`Test`这篇文章。  \n同时，因为`张三`不是任何一篇文章的`reviewer`，所以通过`zhangsan.review_articles`查询到结果为空列表。  \n同样的，我们来看`李四`的查询操作：\n\n\n```\n>>> lisi = User.query.filter_by(name='李四').first()\n>>> lisi\n<User id=2, name=李四>\n>>> lisi.articles\n[]\n>>> lisi.review_articles\n[<Article id=1, title=Test>]\n```\n\n\n结果其实跟`张三`的查询是类似的，只是两人的角色`author`和`reviewer`不同，这里不再啰嗦。  ","source":"_posts/SQLAchemy中处理两张表之间存在多个外键的情况.md","raw":"---\ntitle: SQLAchemy中处理两张表之间存在多个外键的情况\ndate: 2019-01-24 23:51:17\ncategories: Flask\ntags:\n    - Flask\n    - Flask-SQLAchemy\n    - SQLAchemy\n---\n在Flask的开发中，我们势必会遇到两张表之间存在多个外键的情况。例如，现在有两张表，一张表是`User`，另一张表是`Article`。一篇文章的作者`author_id`可以设置外键关联`User`表，同时文章的审稿人`reviewer_id`也可以设置外键关联`User`表。当我们以SQLAchemy多对一(many to one)的设计方法来添加`relationship`关系映射时，程序会抛出一个`AmbiguousForeignKeysError`错误，这篇文章我们就来解决这个问题。\n<!--more-->\n### 出现Error的代码写法 \n先来看以SQLAchemy多对一的常规设计方法处理这个问题时我的代码写法。  \n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)  \n    email = db.Column(db.String(64), nullable=False, unique=True)  \n    name = db.Column(db.String(32), nullable=False)  \n    ...  \n    \nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id = db.Column(db.Integer, primary_key=True)  \n    title = db.Column(db.String(64), nullable=False) \n    author_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    reviewer_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    author = db.relationship('User', backref='articles')  \n    reviewer = db.relationship('User', backref='review_articles')  \n```\n\n\n看起来程序的设计应该是没问题，可运行的结果真的跟我们预想的一样吗？  \n当我们运行代码后，程序抛出了一个错误：  \n\n```\nsqlalchemy.exc.AmbiguousForeignKeysError: \nCould not determine join condition between parent/child tables on relationship Article.author \n- there are multiple foreign key paths linking the tables.  \nSpecify the 'foreign_keys' argument, providing a list of those columns \nwhich should be counted as containing a foreign key reference to the parent table. \n```\n\n可以看到SQLAchemy提示无法确定`Article.author`的父子表之间的关联，原因在于两张表之间存在多个外键。需要我们指定`foreign_keys`参数，提供一个包含关联了父表（即`User`表）外键的字段列表（`list`)  \n\n### 解决办法  \n\n查询了很多博客资料后这个问题依旧没有得到解决，只好去阅读[SQLAchemy的官方文档](https://docs.sqlalchemy.org/en/latest/index.html)，在SQLAchemy ORM > Relationship Configuation > Configuring how Relationship Joins下有关于[Handling Multiple Join Paths](https://docs.sqlalchemy.org/en/latest/orm/join_conditions.html#handling-multiple-join-paths)的介绍。  \n\n文档中说，在遇到两表之间存在多外键关联时，需要给`relationship()`指定`foreign_keys`参数。需要对我们的代码进行修改，添加`foreign_keys`参数，所以将代码修改为：  \n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)  \n    email = db.Column(db.String(64), nullable=False, unique=True)  \n    name = db.Column(db.String(32), nullable=False)  \n    ...\n\n    def __repr__(self):\n        return '<User id={0}, name={1}>'.format(self.id, self.name)  \n    \nclass Article(db.Model):\n    __tablename__ = 'articles'\n    id = db.Column(db.Integer, primary_key=True)  \n    title = db.Column(db.String(64), nullable=False) \n    author_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    reviewer_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))\n    author = db.relationship('User', backref='articles', foreign_keys=[author_id])  \n    reviewer = db.relationship('User', backref='review_articles', foreign_keys=[reviewer_id])\n\n    def __repr__(self):\n        return '<Article id={0}, title={1}>'.format(self.id, self.title)     \n```\n\n\n同时，在指定`foreign_keys`时，我们也可以使用字符串来指定。但如果使用列表，则列表必须是字符串的一部分。  \n\n```python\nauthor = db.relationship('User', backref='articles', foreign_keys=\"[author_id]\")\n```\n\n\n在我们这个具体的例子中，不需要列表，所以可以写成： \n\n\n```python\nauthor = db.relationship('User', backref='articles', foreign_keys=\"author_id\")\n```\n\n\n### 测试  \n\n在修改过后，我们运行程序，测试一下代码  \n我们先给`User`表添加两条数据   \n\n\n```\n>>> zhangsan = User(email='zhangsan@123.com', name='张三')\n>>> lisi = User(emaill='lisi@123.com', name='李四')\n>>> db.session.add_all([zhangsan,lisi])\n>>> db.session.commit()\n```\n\n\n接着给`Article`表添加一条记录，指定`Author`为`张三(users.id=1)`，`Reviewer`为`李四(users.id=2)`   \n\n\n```\n>>> article = Article()\n>>> article.title = \"Test\"\n>>> article.author_id = 1\n>>> article.reviewer_id = 2\n>>> db.session.add(article)\n>>> db.session.commit()\n```\n\n\n\n我们来做查询操作  \n\n\n```\n>>> article = Article.query.get(1)\n>>> article\n<Article id=1, title=Test>\n>>> article.author\n<User id=1, name=张三>\n>>> article.reviewer\n<User id=2, name=李四>\n```\n\n\n可以看到我们可以正确的查询到`article.author`和`article.reviewer`，关于[SQLAchemy中处理两张表之间存在多个外键的情况]()这个问题我们已经解决。  \n\n### 扩展  \n\n\n在`relationship()`中我们添加了`backref`参数来对关系提供反向引用，这样更加方便了我们的查询操作。示例： \n\n\n```\n>>> zhangsan = User.query.filter_by(name='张三').first()\n>>> zhangsan\n<User id=1, name=张三>\n>>> zhangsan.articles\n[<Article id=1, title=Test>]\n>>> zhangsan.review_articles\n[]\n```\n\n\n因为我们给`artice.author`添加了`articles`的反向引用，给`article.reviewer`添加了`review_articles`的反向引用。  \n所以对于`User 张三`来说，他是`article Test`的`Author`，可以通过`article.author`来查询得到`张三`。也可以通过`zhangsan.articles`反向查询得到`Test`这篇文章。  \n同时，因为`张三`不是任何一篇文章的`reviewer`，所以通过`zhangsan.review_articles`查询到结果为空列表。  \n同样的，我们来看`李四`的查询操作：\n\n\n```\n>>> lisi = User.query.filter_by(name='李四').first()\n>>> lisi\n<User id=2, name=李四>\n>>> lisi.articles\n[]\n>>> lisi.review_articles\n[<Article id=1, title=Test>]\n```\n\n\n结果其实跟`张三`的查询是类似的，只是两人的角色`author`和`reviewer`不同，这里不再啰嗦。  ","slug":"SQLAchemy中处理两张表之间存在多个外键的情况","published":1,"updated":"2019-01-25T09:47:08.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy8tn16z0007m6wwcbafvtp2","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>在Flask的开发中，我们势必会遇到两张表之间存在多个外键的情况。例如，现在有两张表，一张表是<code>User</code>，另一张表是<code>Article</code>。一篇文章的作者<code>author_id</code>可以设置外键关联<code>User</code>表，同时文章的审稿人<code>reviewer_id</code>也可以设置外键关联<code>User</code>表。当我们以SQLAchemy多对一(many to one)的设计方法来添加<code>relationship</code>关系映射时，程序会抛出一个<code>AmbiguousForeignKeysError</code>错误，这篇文章我们就来解决这个问题。<br><a id=\"more\"></a></p><h3 id=\"出现Error的代码写法\"><a href=\"#出现Error的代码写法\" class=\"headerlink\" title=\"出现Error的代码写法\"></a>出现Error的代码写法</h3><p>先来看以SQLAchemy多对一的常规设计方法处理这个问题时我的代码写法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    email = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>, unique=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">32</span>), nullable=<span class=\"keyword\">False</span>)  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'articles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    title = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>) </span><br><span class=\"line\">    author_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    reviewer_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>)  </span><br><span class=\"line\">    reviewer = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'review_articles'</span>)</span><br></pre></td></tr></table></figure><p>看起来程序的设计应该是没问题，可运行的结果真的跟我们预想的一样吗？<br>当我们运行代码后，程序抛出了一个错误：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.exc.AmbiguousForeignKeysError: </span><br><span class=\"line\">Could not determine join condition between parent/child tables on relationship Article.author </span><br><span class=\"line\">- there are multiple foreign key paths linking the tables.  </span><br><span class=\"line\">Specify the &apos;foreign_keys&apos; argument, providing a list of those columns </span><br><span class=\"line\">which should be counted as containing a foreign key reference to the parent table.</span><br></pre></td></tr></table></figure><p>可以看到SQLAchemy提示无法确定<code>Article.author</code>的父子表之间的关联，原因在于两张表之间存在多个外键。需要我们指定<code>foreign_keys</code>参数，提供一个包含关联了父表（即<code>User</code>表）外键的字段列表（<code>list</code>)</p><h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>查询了很多博客资料后这个问题依旧没有得到解决，只好去阅读<a href=\"https://docs.sqlalchemy.org/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">SQLAchemy的官方文档</a>，在SQLAchemy ORM &gt; Relationship Configuation &gt; Configuring how Relationship Joins下有关于<a href=\"https://docs.sqlalchemy.org/en/latest/orm/join_conditions.html#handling-multiple-join-paths\" target=\"_blank\" rel=\"noopener\">Handling Multiple Join Paths</a>的介绍。</p><p>文档中说，在遇到两表之间存在多外键关联时，需要给<code>relationship()</code>指定<code>foreign_keys</code>参数。需要对我们的代码进行修改，添加<code>foreign_keys</code>参数，所以将代码修改为：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    email = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>, unique=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">32</span>), nullable=<span class=\"keyword\">False</span>)  </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User id=&#123;0&#125;, name=&#123;1&#125;&gt;'</span>.format(self.id, self.name)  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'articles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    title = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>) </span><br><span class=\"line\">    author_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    reviewer_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=[author_id])  </span><br><span class=\"line\">    reviewer = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'review_articles'</span>, foreign_keys=[reviewer_id])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Article id=&#123;0&#125;, title=&#123;1&#125;&gt;'</span>.format(self.id, self.title)</span><br></pre></td></tr></table></figure><p>同时，在指定<code>foreign_keys</code>时，我们也可以使用字符串来指定。但如果使用列表，则列表必须是字符串的一部分。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=<span class=\"string\">\"[author_id]\"</span>)</span><br></pre></td></tr></table></figure><p>在我们这个具体的例子中，不需要列表，所以可以写成：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=<span class=\"string\">\"author_id\"</span>)</span><br></pre></td></tr></table></figure><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在修改过后，我们运行程序，测试一下代码<br>我们先给<code>User</code>表添加两条数据</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; zhangsan = User(email=&apos;zhangsan@123.com&apos;, name=&apos;张三&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; lisi = User(emaill=&apos;lisi@123.com&apos;, name=&apos;李四&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; db.session.add_all([zhangsan,lisi])</span><br><span class=\"line\">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure><p>接着给<code>Article</code>表添加一条记录，指定<code>Author</code>为<code>张三(users.id=1)</code>，<code>Reviewer</code>为<code>李四(users.id=2)</code></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; article = Article()</span><br><span class=\"line\">&gt;&gt;&gt; article.title = &quot;Test&quot;</span><br><span class=\"line\">&gt;&gt;&gt; article.author_id = 1</span><br><span class=\"line\">&gt;&gt;&gt; article.reviewer_id = 2</span><br><span class=\"line\">&gt;&gt;&gt; db.session.add(article)</span><br><span class=\"line\">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure><p>我们来做查询操作</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; article = Article.query.get(1)</span><br><span class=\"line\">&gt;&gt;&gt; article</span><br><span class=\"line\">&lt;Article id=1, title=Test&gt;</span><br><span class=\"line\">&gt;&gt;&gt; article.author</span><br><span class=\"line\">&lt;User id=1, name=张三&gt;</span><br><span class=\"line\">&gt;&gt;&gt; article.reviewer</span><br><span class=\"line\">&lt;User id=2, name=李四&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们可以正确的查询到<code>article.author</code>和<code>article.reviewer</code>，关于<a href=\"\">SQLAchemy中处理两张表之间存在多个外键的情况</a>这个问题我们已经解决。</p><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>在<code>relationship()</code>中我们添加了<code>backref</code>参数来对关系提供反向引用，这样更加方便了我们的查询操作。示例：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; zhangsan = User.query.filter_by(name=&apos;张三&apos;).first()</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan</span><br><span class=\"line\">&lt;User id=1, name=张三&gt;</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan.articles</span><br><span class=\"line\">[&lt;Article id=1, title=Test&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan.review_articles</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure><p>因为我们给<code>artice.author</code>添加了<code>articles</code>的反向引用，给<code>article.reviewer</code>添加了<code>review_articles</code>的反向引用。<br>所以对于<code>User 张三</code>来说，他是<code>article Test</code>的<code>Author</code>，可以通过<code>article.author</code>来查询得到<code>张三</code>。也可以通过<code>zhangsan.articles</code>反向查询得到<code>Test</code>这篇文章。<br>同时，因为<code>张三</code>不是任何一篇文章的<code>reviewer</code>，所以通过<code>zhangsan.review_articles</code>查询到结果为空列表。<br>同样的，我们来看<code>李四</code>的查询操作：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lisi = User.query.filter_by(name=&apos;李四&apos;).first()</span><br><span class=\"line\">&gt;&gt;&gt; lisi</span><br><span class=\"line\">&lt;User id=2, name=李四&gt;</span><br><span class=\"line\">&gt;&gt;&gt; lisi.articles</span><br><span class=\"line\">[]</span><br><span class=\"line\">&gt;&gt;&gt; lisi.review_articles</span><br><span class=\"line\">[&lt;Article id=1, title=Test&gt;]</span><br></pre></td></tr></table></figure><p>结果其实跟<code>张三</code>的查询是类似的，只是两人的角色<code>author</code>和<code>reviewer</code>不同，这里不再啰嗦。</p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>在Flask的开发中，我们势必会遇到两张表之间存在多个外键的情况。例如，现在有两张表，一张表是<code>User</code>，另一张表是<code>Article</code>。一篇文章的作者<code>author_id</code>可以设置外键关联<code>User</code>表，同时文章的审稿人<code>reviewer_id</code>也可以设置外键关联<code>User</code>表。当我们以SQLAchemy多对一(many to one)的设计方法来添加<code>relationship</code>关系映射时，程序会抛出一个<code>AmbiguousForeignKeysError</code>错误，这篇文章我们就来解决这个问题。<br>","more":"</p><h3 id=\"出现Error的代码写法\"><a href=\"#出现Error的代码写法\" class=\"headerlink\" title=\"出现Error的代码写法\"></a>出现Error的代码写法</h3><p>先来看以SQLAchemy多对一的常规设计方法处理这个问题时我的代码写法。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    email = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>, unique=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">32</span>), nullable=<span class=\"keyword\">False</span>)  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'articles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    title = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>) </span><br><span class=\"line\">    author_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    reviewer_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>)  </span><br><span class=\"line\">    reviewer = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'review_articles'</span>)</span><br></pre></td></tr></table></figure><p>看起来程序的设计应该是没问题，可运行的结果真的跟我们预想的一样吗？<br>当我们运行代码后，程序抛出了一个错误：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.exc.AmbiguousForeignKeysError: </span><br><span class=\"line\">Could not determine join condition between parent/child tables on relationship Article.author </span><br><span class=\"line\">- there are multiple foreign key paths linking the tables.  </span><br><span class=\"line\">Specify the &apos;foreign_keys&apos; argument, providing a list of those columns </span><br><span class=\"line\">which should be counted as containing a foreign key reference to the parent table.</span><br></pre></td></tr></table></figure><p>可以看到SQLAchemy提示无法确定<code>Article.author</code>的父子表之间的关联，原因在于两张表之间存在多个外键。需要我们指定<code>foreign_keys</code>参数，提供一个包含关联了父表（即<code>User</code>表）外键的字段列表（<code>list</code>)</p><h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>查询了很多博客资料后这个问题依旧没有得到解决，只好去阅读<a href=\"https://docs.sqlalchemy.org/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">SQLAchemy的官方文档</a>，在SQLAchemy ORM &gt; Relationship Configuation &gt; Configuring how Relationship Joins下有关于<a href=\"https://docs.sqlalchemy.org/en/latest/orm/join_conditions.html#handling-multiple-join-paths\" target=\"_blank\" rel=\"noopener\">Handling Multiple Join Paths</a>的介绍。</p><p>文档中说，在遇到两表之间存在多外键关联时，需要给<code>relationship()</code>指定<code>foreign_keys</code>参数。需要对我们的代码进行修改，添加<code>foreign_keys</code>参数，所以将代码修改为：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'users'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    email = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>, unique=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">32</span>), nullable=<span class=\"keyword\">False</span>)  </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;User id=&#123;0&#125;, name=&#123;1&#125;&gt;'</span>.format(self.id, self.name)  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'articles'</span></span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">    title = db.Column(db.String(<span class=\"number\">64</span>), nullable=<span class=\"keyword\">False</span>) </span><br><span class=\"line\">    author_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    reviewer_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">\"users.id\"</span>))</span><br><span class=\"line\">    author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=[author_id])  </span><br><span class=\"line\">    reviewer = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'review_articles'</span>, foreign_keys=[reviewer_id])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;Article id=&#123;0&#125;, title=&#123;1&#125;&gt;'</span>.format(self.id, self.title)</span><br></pre></td></tr></table></figure><p>同时，在指定<code>foreign_keys</code>时，我们也可以使用字符串来指定。但如果使用列表，则列表必须是字符串的一部分。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=<span class=\"string\">\"[author_id]\"</span>)</span><br></pre></td></tr></table></figure><p>在我们这个具体的例子中，不需要列表，所以可以写成：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = db.relationship(<span class=\"string\">'User'</span>, backref=<span class=\"string\">'articles'</span>, foreign_keys=<span class=\"string\">\"author_id\"</span>)</span><br></pre></td></tr></table></figure><h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在修改过后，我们运行程序，测试一下代码<br>我们先给<code>User</code>表添加两条数据</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; zhangsan = User(email=&apos;zhangsan@123.com&apos;, name=&apos;张三&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; lisi = User(emaill=&apos;lisi@123.com&apos;, name=&apos;李四&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; db.session.add_all([zhangsan,lisi])</span><br><span class=\"line\">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure><p>接着给<code>Article</code>表添加一条记录，指定<code>Author</code>为<code>张三(users.id=1)</code>，<code>Reviewer</code>为<code>李四(users.id=2)</code></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; article = Article()</span><br><span class=\"line\">&gt;&gt;&gt; article.title = &quot;Test&quot;</span><br><span class=\"line\">&gt;&gt;&gt; article.author_id = 1</span><br><span class=\"line\">&gt;&gt;&gt; article.reviewer_id = 2</span><br><span class=\"line\">&gt;&gt;&gt; db.session.add(article)</span><br><span class=\"line\">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure><p>我们来做查询操作</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; article = Article.query.get(1)</span><br><span class=\"line\">&gt;&gt;&gt; article</span><br><span class=\"line\">&lt;Article id=1, title=Test&gt;</span><br><span class=\"line\">&gt;&gt;&gt; article.author</span><br><span class=\"line\">&lt;User id=1, name=张三&gt;</span><br><span class=\"line\">&gt;&gt;&gt; article.reviewer</span><br><span class=\"line\">&lt;User id=2, name=李四&gt;</span><br></pre></td></tr></table></figure><p>可以看到我们可以正确的查询到<code>article.author</code>和<code>article.reviewer</code>，关于<a href=\"\">SQLAchemy中处理两张表之间存在多个外键的情况</a>这个问题我们已经解决。</p><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>在<code>relationship()</code>中我们添加了<code>backref</code>参数来对关系提供反向引用，这样更加方便了我们的查询操作。示例：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; zhangsan = User.query.filter_by(name=&apos;张三&apos;).first()</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan</span><br><span class=\"line\">&lt;User id=1, name=张三&gt;</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan.articles</span><br><span class=\"line\">[&lt;Article id=1, title=Test&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; zhangsan.review_articles</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure><p>因为我们给<code>artice.author</code>添加了<code>articles</code>的反向引用，给<code>article.reviewer</code>添加了<code>review_articles</code>的反向引用。<br>所以对于<code>User 张三</code>来说，他是<code>article Test</code>的<code>Author</code>，可以通过<code>article.author</code>来查询得到<code>张三</code>。也可以通过<code>zhangsan.articles</code>反向查询得到<code>Test</code>这篇文章。<br>同时，因为<code>张三</code>不是任何一篇文章的<code>reviewer</code>，所以通过<code>zhangsan.review_articles</code>查询到结果为空列表。<br>同样的，我们来看<code>李四</code>的查询操作：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; lisi = User.query.filter_by(name=&apos;李四&apos;).first()</span><br><span class=\"line\">&gt;&gt;&gt; lisi</span><br><span class=\"line\">&lt;User id=2, name=李四&gt;</span><br><span class=\"line\">&gt;&gt;&gt; lisi.articles</span><br><span class=\"line\">[]</span><br><span class=\"line\">&gt;&gt;&gt; lisi.review_articles</span><br><span class=\"line\">[&lt;Article id=1, title=Test&gt;]</span><br></pre></td></tr></table></figure><p>结果其实跟<code>张三</code>的查询是类似的，只是两人的角色<code>author</code>和<code>reviewer</code>不同，这里不再啰嗦。</p><!-- rebuild by neat -->"},{"title":"数据库索引优化","date":"2019-07-16T15:14:46.000Z","_content":"\n对于数据库的优化主要包括三个部分：查询优化、索引优化和字段类型优化，其中，索引优化则是数据库优化的重中之重。一个查询使用索引与不使用索引的差别可能只在100个数量级，而一个好的索引与不好的索引差别可能在1000个数量级，但是一个最优的索引与普通的索引查询效率可能就相差上万甚至更高的数量级。本文主要重点讲解数据库索引的优化。\n\n<!--more-->\n\n## 一、 SQL性能下降原因\n\n\n>  性能下降SQL慢  \n>  执行时间长  \n>  等待时间长\n\n1. 查询语句写的烂\n2. 索引失效\n3. 关联查询太多join（设计缺陷或不得已需求）\n4. 服务器调优以及各个参数设置（缓冲，线程数等）\n\n## 二、七种Jion\n\n ![](https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg)  \n\n## 三、 索引\n\n### 1. 创建索引\n\n```sql\n# 普通索引\nALTER TABLE table_name ADD INDEX index_name (column_list)\n\n# 唯一索引\nALTER TABLE table_name ADD UNIQUE INDEX index_name (column_lsit)\n\n# 主键索引\nALTER TABLE table_name ADD PRIMARY KEY (column)\n```\n\n### 2. 查看索引\n\n```sql\nSHOW INDEX FROM table_name\n```\n\n### 3. 删除索引\n\n```sql\nDROP INDEX [index_name] ON table_name\n\n# 或者\nALTER TABLE table_name DROP INDEX index_name\n\n# eg:删除主键\nALTER TABLE table_name DROP PRIMARY KEY\n```\n\n## 四、哪些情况需要建立索引\n\n1. 主键自动建立唯一索引\n2. 频繁作为查询条件的字段应该建立索引\n3. 查询中与其他表关联的字段，外键关系建立索引\n4. 单值索引与组合索引的选择：高并发下倾向于组合索引\n5. 查询中排序的字段，若通过索引去访问将大大提高排序速度\n6. 查询中统计或分组的段\n\n## 五、哪些情况不要建立索引\n\n1. 表记录过少\n2. 经常增删改的表  \n   为了提高查询速度，同时却会降低更新表的速度。因为更新表时，不仅要保存数据，还要更新索引文件。\n3. 数据重复且分布均匀的表字段，因此应该只为最经常查询和排序的数据列建立索引\n4. 频繁更新的字段不适合创建索引  \n   更新索引，加重了IO负担\n5. where条件里用不到的字段不创建索引\n\n## 六、增加索引带来的问题\n\n1. 创建索引和维护索引需要耗费时间，并且随着数据量的增加所耗费的时间也会增加\n2. 索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。\n3. 当对表中的数据进行增删改是，索引也需要动态的维护，这样就降低了数据的维护速度。\n\n## 七、性能分析\n\n\n> 使用 `EXPLAIN` 关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的，从而进行优化\n\n### 1. 具体能干嘛\n\n1. 表的读取顺序\n2. 数据读取操作的操作类型\n3. 哪些索引可以使用\n4. 哪些索引被实际使用\n5. 表之间的引用\n6. 每张表有多少行被优化器查询\n\n### 2. 具体怎么用\n\n```sql\nEXPLAIN + SQL语句\n```\n\n##### 返回的信息：\n\n![ZTyU1g.png](https://s2.ax1x.com/2019/07/15/ZTyU1g.png)\n\n\n\n## 八、 EXPLAIN 各个名词的解释\n\n### 1. id\n\n\n> select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序\n\n##### 四种情况\n\n- id 相同： 执行顺序由上至下\n- id 不同：id 值越大，优先级越高，越先被执行\n- id 有相同也有不同，首先执行 id 值大的语句，id 值相同的，由上至下顺序执行\n- null 表示用来合并结果集，在SQL中使用 `UNION` 关键字合并结果集就会出现它\n\n### 2. select_type\n\n\n> 指定所使用的 `SELECT` 查询类型，主要用于区别普通查询、联合查询、子查询等复杂查询\n\n##### 2.1 SIMPLE\n\n简单的 `SELECT` 查询，查询不包含子查询或者UNION\n\n![Z7IJvq.png](https://s2.ax1x.com/2019/07/16/Z7IJvq.png)\n\n##### 2.2 PRIMARY\n\n查询中最外层的SELECT（如两表做UNION或者存在子查询的外层的表操作为PRIMARY，内层的操作为UNION）\n\n![Z7IHMt.png](https://s2.ax1x.com/2019/07/16/Z7IHMt.png)\n\n##### 2.3 SUBQUERY\n\n在 `SELECT` 或 `WHERE` 中包含了子查询中的首个 `SELECT` (如果有多个子查询存在)\n\n![Z7IHMt.png](https://s2.ax1x.com/2019/07/16/Z7IHMt.png)\n\n##### 2.4 DEPENDENT SUBQUERY\n\n子查询中首个 `SELECT`，但依赖于外层的表（如果有多个子查询存在）\n\n**重点解释**   \n子查询的查询方式依赖于外面的查询结果.用这个例子就是,先进行子查询外部的查询,得到一个结果集,.然后这个结果的每一行在跟select子查询的结果集进行匹配,也就是说,外部结果集的每一行都要关联内部结果集一次\n\n![Z7Tvgs.png](https://s2.ax1x.com/2019/07/16/Z7Tvgs.png)\n\n##### 2.5 DERIVED\n\n在 `FROM` 列表中包含的子查询被标记为 `DERIVED(衍生)`，MySQL会递归执行这些子查询，把结果放在临时表里。\n\n##### 2.6 UNION\n\n若第二个 `SELECT` 出现在 `UNION` 之后，则会被标记为UNION；若UNION包含在 `FROM` 子句的子查询中，外层的 `SELECT` 将会被标记为 `DERIVED`\n\n![Z7HXXn.png](https://s2.ax1x.com/2019/07/16/Z7HXXn.png)\n\n##### 2.7 UNIOIN RESULT\n\nUNION操作的结果，id值通常为NULL\n\n### 3.table\n\n\n> 显示这一行的数据是关于哪一张表的\n\n### 4.type\n\n\n> 表示访问类型，通俗解释就是MySQL查找数据列的方式。\n\n下边从最优到最差的顺序分别介绍\n\n##### 4.1 system\n\n表中只有一条数据. 这个类型是特殊的 `const` 类型\n\n##### 4.2 const\n\n表示通过索引一次就找到了数据列，`const` 用于比较 `primary key` 或者 `unique` 索引。因为只匹配一行数据，所以查询速度很快。  \n比如将主键当做 `WHERE` 条件去查询，MySQL可以将这个查询转换为一个常量。\n\n![](https://s2.ax1x.com/2019/07/16/ZHS7b4.png)\n\n##### 4.3 eq_ref\n\n唯一性索引扫描，对于每一个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。\n\n![](https://s2.ax1x.com/2019/07/16/ZHp9qe.png)\n\n##### 4.4 ref\n\n针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询，返回匹配某个单独值的所有行。  \n本质上也是一种索引访问，它返回所有匹配某个单独值的行，但是它可能会找到多个符合条件的 行，所以它应该属于查找和扫描的混合体。\n\n![ZHCwCR.png](https://s2.ax1x.com/2019/07/16/ZHCwCR.png)\n\n##### 4.5 range\n\n只检索给定范围的行，使用一个索引来选择行。 `key` 列显示使用了哪个索引。  \n一般是在 `WHERE` 语句中出现了 `between` `<` `>` `in` 等的查询。  \n这种范围扫描索引比全表扫描索引要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。\n\n![ZHPIY9.png](https://s2.ax1x.com/2019/07/16/ZHPIY9.png)\n\n##### 4.6 index\n\n表示全索引扫描，`index` 与 `ALL` 的区别在于 `index` 类型只遍历索引树。\n\n![ZHFiC9.png](https://s2.ax1x.com/2019/07/16/ZHFiC9.png)\n\n##### 4.7 ALL\n\n全表扫描，没有用到任何的index，效率最差。\n\n![ZHFDvq.png](https://s2.ax1x.com/2019/07/16/ZHFDvq.png)\n\n##### 总结\n\n从最好到最差依次是：\nsystem > const > eq_ref > ref > range > index > ALL\n\n一般来说，得保证查询至少达到 `range` 级别，最好能达到 `ref`\n\n### 5. possible_keys\n\n\n> 显示可能应用在这张表中的索引，一个或多个。  \n> 查询涉及的字段若存在索引，则改索引将被列出，**但不一定被查询实际用到**\n\n![ZHE9US.png](https://s2.ax1x.com/2019/07/16/ZHE9US.png)\n\n### 6. key\n\n\n> 实际中用到的索引，如果为 `NULL` 则表示没有用到索引  \n> 如查询中用到了覆盖索引，则该索引和查询的 `SELECT` 字段重叠\n\n![ZHEDxA.png](https://s2.ax1x.com/2019/07/16/ZHEDxA.png)\n\n*覆盖索引：在本例中：我在 `addr` 和 `email` 上建立聚合索引，在查询时也查询的是 `addr` 和 `email` 这两个字段，所以刚好和索引匹配了。*\n*当发起一个被索引覆盖的查询(也叫作索引覆盖查询)时，在 `Extra` 列可以看到 `Using index` 的信息*\n\n### 7. key_len\n\n> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。  \n> `key_len` 显示的值为索引字段的最大可能长度，**并非实际使用长度**，即 `key_len` 是根据表定义计算而得，不是通过表内检索出的。\n\n### 8. ref\n\n> 显示索引的哪一列被使用了，如果可能的话，是一个常数。  \n> 常见的值有 `const`, `func`, `NULL`, 具体字段名。当 `key` 列为 `NULL` ，即不使用索引时 。如果值是 `func`，则使用的值是某个函数的结果\n\n### 9. rows\n\n> 根据表统计信息及索引使用情况，大致估算出找到所需的记录所需要读取的行数。  \n> 简单且重要，数值越大越不好，说明没有用好索引\n\n### 10. Extra\n\n> 该列包含 MySQL 查询的详细信息。\n\n##### 10.1 Using filesort (出现这个表示效果不好)\n\n说明 MySQL 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。  \nMySQL 中无法利用索引完成的排序操作称为“文件排序”\n\n![ZHmtQH.png](https://s2.ax1x.com/2019/07/16/ZHmtQH.png)\n\n##### 10.2 Using temporary (出现这个表示效果不好)\n\n使用了临时表保存中间结果，MySQL 在对查询结果进行排序是使用临时表。  \n常见于排序 `ORDER BY` 和分组查询 `GROUP BY`\n\n![ZHn5DA.png](https://s2.ax1x.com/2019/07/16/ZHn5DA.png)\n\n##### 10.3 Using index (出现这个表示效果好)\n\n表示相应的 `SELECT` 操作中使用了覆盖索引，避免访问了表的数据行，效率不错。  \n如果同时出现 `Using where` 表示索引被用来执行索引键值的查找  \n如果没有出现 `Using where` 表示索引用来读取数据而非执行查找动作。\n\n![ZHEDxA.png](https://s2.ax1x.com/2019/07/16/ZHEDxA.png)\n\n##### 10.4 Using where\n\n表示使用了 `WHERE` 过滤\n\n![ZHKnyQ.png](https://s2.ax1x.com/2019/07/16/ZHKnyQ.png)\n\n##### 10.5 Using join buffer\n\n> 使用了连接缓存\n\n##### 10.6 Impossible where\n\n`WHERE` 子句的值总是 False ， 不能用来获取任何数据列。\n\n![ZHQnVs.png](https://s2.ax1x.com/2019/07/16/ZHQnVs.png)\n\n## 九、避免索引失效\n\n### 1. 全值匹配\n\n对于联合索引，在 `WHERE` 子查询是尽量使用所有索引列来过滤查询\n\n### 2. 最左前缀原则\n\n联合索引下，查询从索引的最左前列开始并且**不能跳过索引中间的列**\n\n![ZH1O2V.png](https://s2.ax1x.com/2019/07/16/ZH1O2V.png)\n\n### 3. 不在索引列上做任何操作\n\n不要在索引列上进行 计算、函数、（自动或手动）类型转换，否则会导致索引失效而转向全表扫描。\n\n![ZH1c4I.png](https://s2.ax1x.com/2019/07/16/ZH1c4I.png)\n\n### 4. 范围条件查询会导致右边的索引失效\n\n![ZHJQi9.png](https://s2.ax1x.com/2019/07/16/ZHJQi9.png)\n\n**解释：**  \n当我们三个索引都使用时， `key_len` 为 107，在使用前两个索引时， `key_len` 值为 40  \n此时，我们在 `WHERE` 子查询过滤条件中使用了范围条件，从而导致索引 `addr` 失效。\n\n### 5. 尽量使用覆盖索引，减少 `SELECT * ` 的使用\n\n### 6. 使用不等于(!= 或 <>) 会导致索引失效\n\n![ZHarb6.png](https://s2.ax1x.com/2019/07/16/ZHarb6.png)\n\n### 7. is null, is not null 也会导致索引失效\n\n![ZH7FYD.png](https://s2.ax1x.com/2019/07/16/ZH7FYD.png)\n\n### 8. LIKE 以通配符开头 ('%字符串') 会导致索引失效\n\n![ZHHc8g.png](https://s2.ax1x.com/2019/07/16/ZHHc8g.png)\n\n**解决办法**  \n可以使用以通配符结尾来检索 `'字符串%'`\n\n### 9. 字符串不加引号会导致索引失效\n\n![ZHb1Mj.png](https://s2.ax1x.com/2019/07/16/ZHb1Mj.png)\n\n**解释**  \n第 3 条里说道，不要自动或手动做类型转换。  \n这里 `20000` 为字符串，当我们在查询时不加引号的话，那么 MySQL 会自动做类型转换，导致索引失效\n\n### 10. 少用 OR，会导致索引失效\n\n![ZHqkfU.png](https://s2.ax1x.com/2019/07/16/ZHqkfU.png)\n","source":"_posts/数据库索引优化.md","raw":"---\ntitle: 数据库索引优化\ndate: 2019-07-16 23:14:46\ncategories: 数据库\ntags: \n    - 索引\n    - MySQL\n    - 数据库\n---\n\n对于数据库的优化主要包括三个部分：查询优化、索引优化和字段类型优化，其中，索引优化则是数据库优化的重中之重。一个查询使用索引与不使用索引的差别可能只在100个数量级，而一个好的索引与不好的索引差别可能在1000个数量级，但是一个最优的索引与普通的索引查询效率可能就相差上万甚至更高的数量级。本文主要重点讲解数据库索引的优化。\n\n<!--more-->\n\n## 一、 SQL性能下降原因\n\n\n>  性能下降SQL慢  \n>  执行时间长  \n>  等待时间长\n\n1. 查询语句写的烂\n2. 索引失效\n3. 关联查询太多join（设计缺陷或不得已需求）\n4. 服务器调优以及各个参数设置（缓冲，线程数等）\n\n## 二、七种Jion\n\n ![](https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg)  \n\n## 三、 索引\n\n### 1. 创建索引\n\n```sql\n# 普通索引\nALTER TABLE table_name ADD INDEX index_name (column_list)\n\n# 唯一索引\nALTER TABLE table_name ADD UNIQUE INDEX index_name (column_lsit)\n\n# 主键索引\nALTER TABLE table_name ADD PRIMARY KEY (column)\n```\n\n### 2. 查看索引\n\n```sql\nSHOW INDEX FROM table_name\n```\n\n### 3. 删除索引\n\n```sql\nDROP INDEX [index_name] ON table_name\n\n# 或者\nALTER TABLE table_name DROP INDEX index_name\n\n# eg:删除主键\nALTER TABLE table_name DROP PRIMARY KEY\n```\n\n## 四、哪些情况需要建立索引\n\n1. 主键自动建立唯一索引\n2. 频繁作为查询条件的字段应该建立索引\n3. 查询中与其他表关联的字段，外键关系建立索引\n4. 单值索引与组合索引的选择：高并发下倾向于组合索引\n5. 查询中排序的字段，若通过索引去访问将大大提高排序速度\n6. 查询中统计或分组的段\n\n## 五、哪些情况不要建立索引\n\n1. 表记录过少\n2. 经常增删改的表  \n   为了提高查询速度，同时却会降低更新表的速度。因为更新表时，不仅要保存数据，还要更新索引文件。\n3. 数据重复且分布均匀的表字段，因此应该只为最经常查询和排序的数据列建立索引\n4. 频繁更新的字段不适合创建索引  \n   更新索引，加重了IO负担\n5. where条件里用不到的字段不创建索引\n\n## 六、增加索引带来的问题\n\n1. 创建索引和维护索引需要耗费时间，并且随着数据量的增加所耗费的时间也会增加\n2. 索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。\n3. 当对表中的数据进行增删改是，索引也需要动态的维护，这样就降低了数据的维护速度。\n\n## 七、性能分析\n\n\n> 使用 `EXPLAIN` 关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的，从而进行优化\n\n### 1. 具体能干嘛\n\n1. 表的读取顺序\n2. 数据读取操作的操作类型\n3. 哪些索引可以使用\n4. 哪些索引被实际使用\n5. 表之间的引用\n6. 每张表有多少行被优化器查询\n\n### 2. 具体怎么用\n\n```sql\nEXPLAIN + SQL语句\n```\n\n##### 返回的信息：\n\n![ZTyU1g.png](https://s2.ax1x.com/2019/07/15/ZTyU1g.png)\n\n\n\n## 八、 EXPLAIN 各个名词的解释\n\n### 1. id\n\n\n> select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序\n\n##### 四种情况\n\n- id 相同： 执行顺序由上至下\n- id 不同：id 值越大，优先级越高，越先被执行\n- id 有相同也有不同，首先执行 id 值大的语句，id 值相同的，由上至下顺序执行\n- null 表示用来合并结果集，在SQL中使用 `UNION` 关键字合并结果集就会出现它\n\n### 2. select_type\n\n\n> 指定所使用的 `SELECT` 查询类型，主要用于区别普通查询、联合查询、子查询等复杂查询\n\n##### 2.1 SIMPLE\n\n简单的 `SELECT` 查询，查询不包含子查询或者UNION\n\n![Z7IJvq.png](https://s2.ax1x.com/2019/07/16/Z7IJvq.png)\n\n##### 2.2 PRIMARY\n\n查询中最外层的SELECT（如两表做UNION或者存在子查询的外层的表操作为PRIMARY，内层的操作为UNION）\n\n![Z7IHMt.png](https://s2.ax1x.com/2019/07/16/Z7IHMt.png)\n\n##### 2.3 SUBQUERY\n\n在 `SELECT` 或 `WHERE` 中包含了子查询中的首个 `SELECT` (如果有多个子查询存在)\n\n![Z7IHMt.png](https://s2.ax1x.com/2019/07/16/Z7IHMt.png)\n\n##### 2.4 DEPENDENT SUBQUERY\n\n子查询中首个 `SELECT`，但依赖于外层的表（如果有多个子查询存在）\n\n**重点解释**   \n子查询的查询方式依赖于外面的查询结果.用这个例子就是,先进行子查询外部的查询,得到一个结果集,.然后这个结果的每一行在跟select子查询的结果集进行匹配,也就是说,外部结果集的每一行都要关联内部结果集一次\n\n![Z7Tvgs.png](https://s2.ax1x.com/2019/07/16/Z7Tvgs.png)\n\n##### 2.5 DERIVED\n\n在 `FROM` 列表中包含的子查询被标记为 `DERIVED(衍生)`，MySQL会递归执行这些子查询，把结果放在临时表里。\n\n##### 2.6 UNION\n\n若第二个 `SELECT` 出现在 `UNION` 之后，则会被标记为UNION；若UNION包含在 `FROM` 子句的子查询中，外层的 `SELECT` 将会被标记为 `DERIVED`\n\n![Z7HXXn.png](https://s2.ax1x.com/2019/07/16/Z7HXXn.png)\n\n##### 2.7 UNIOIN RESULT\n\nUNION操作的结果，id值通常为NULL\n\n### 3.table\n\n\n> 显示这一行的数据是关于哪一张表的\n\n### 4.type\n\n\n> 表示访问类型，通俗解释就是MySQL查找数据列的方式。\n\n下边从最优到最差的顺序分别介绍\n\n##### 4.1 system\n\n表中只有一条数据. 这个类型是特殊的 `const` 类型\n\n##### 4.2 const\n\n表示通过索引一次就找到了数据列，`const` 用于比较 `primary key` 或者 `unique` 索引。因为只匹配一行数据，所以查询速度很快。  \n比如将主键当做 `WHERE` 条件去查询，MySQL可以将这个查询转换为一个常量。\n\n![](https://s2.ax1x.com/2019/07/16/ZHS7b4.png)\n\n##### 4.3 eq_ref\n\n唯一性索引扫描，对于每一个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。\n\n![](https://s2.ax1x.com/2019/07/16/ZHp9qe.png)\n\n##### 4.4 ref\n\n针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询，返回匹配某个单独值的所有行。  \n本质上也是一种索引访问，它返回所有匹配某个单独值的行，但是它可能会找到多个符合条件的 行，所以它应该属于查找和扫描的混合体。\n\n![ZHCwCR.png](https://s2.ax1x.com/2019/07/16/ZHCwCR.png)\n\n##### 4.5 range\n\n只检索给定范围的行，使用一个索引来选择行。 `key` 列显示使用了哪个索引。  \n一般是在 `WHERE` 语句中出现了 `between` `<` `>` `in` 等的查询。  \n这种范围扫描索引比全表扫描索引要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。\n\n![ZHPIY9.png](https://s2.ax1x.com/2019/07/16/ZHPIY9.png)\n\n##### 4.6 index\n\n表示全索引扫描，`index` 与 `ALL` 的区别在于 `index` 类型只遍历索引树。\n\n![ZHFiC9.png](https://s2.ax1x.com/2019/07/16/ZHFiC9.png)\n\n##### 4.7 ALL\n\n全表扫描，没有用到任何的index，效率最差。\n\n![ZHFDvq.png](https://s2.ax1x.com/2019/07/16/ZHFDvq.png)\n\n##### 总结\n\n从最好到最差依次是：\nsystem > const > eq_ref > ref > range > index > ALL\n\n一般来说，得保证查询至少达到 `range` 级别，最好能达到 `ref`\n\n### 5. possible_keys\n\n\n> 显示可能应用在这张表中的索引，一个或多个。  \n> 查询涉及的字段若存在索引，则改索引将被列出，**但不一定被查询实际用到**\n\n![ZHE9US.png](https://s2.ax1x.com/2019/07/16/ZHE9US.png)\n\n### 6. key\n\n\n> 实际中用到的索引，如果为 `NULL` 则表示没有用到索引  \n> 如查询中用到了覆盖索引，则该索引和查询的 `SELECT` 字段重叠\n\n![ZHEDxA.png](https://s2.ax1x.com/2019/07/16/ZHEDxA.png)\n\n*覆盖索引：在本例中：我在 `addr` 和 `email` 上建立聚合索引，在查询时也查询的是 `addr` 和 `email` 这两个字段，所以刚好和索引匹配了。*\n*当发起一个被索引覆盖的查询(也叫作索引覆盖查询)时，在 `Extra` 列可以看到 `Using index` 的信息*\n\n### 7. key_len\n\n> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。  \n> `key_len` 显示的值为索引字段的最大可能长度，**并非实际使用长度**，即 `key_len` 是根据表定义计算而得，不是通过表内检索出的。\n\n### 8. ref\n\n> 显示索引的哪一列被使用了，如果可能的话，是一个常数。  \n> 常见的值有 `const`, `func`, `NULL`, 具体字段名。当 `key` 列为 `NULL` ，即不使用索引时 。如果值是 `func`，则使用的值是某个函数的结果\n\n### 9. rows\n\n> 根据表统计信息及索引使用情况，大致估算出找到所需的记录所需要读取的行数。  \n> 简单且重要，数值越大越不好，说明没有用好索引\n\n### 10. Extra\n\n> 该列包含 MySQL 查询的详细信息。\n\n##### 10.1 Using filesort (出现这个表示效果不好)\n\n说明 MySQL 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。  \nMySQL 中无法利用索引完成的排序操作称为“文件排序”\n\n![ZHmtQH.png](https://s2.ax1x.com/2019/07/16/ZHmtQH.png)\n\n##### 10.2 Using temporary (出现这个表示效果不好)\n\n使用了临时表保存中间结果，MySQL 在对查询结果进行排序是使用临时表。  \n常见于排序 `ORDER BY` 和分组查询 `GROUP BY`\n\n![ZHn5DA.png](https://s2.ax1x.com/2019/07/16/ZHn5DA.png)\n\n##### 10.3 Using index (出现这个表示效果好)\n\n表示相应的 `SELECT` 操作中使用了覆盖索引，避免访问了表的数据行，效率不错。  \n如果同时出现 `Using where` 表示索引被用来执行索引键值的查找  \n如果没有出现 `Using where` 表示索引用来读取数据而非执行查找动作。\n\n![ZHEDxA.png](https://s2.ax1x.com/2019/07/16/ZHEDxA.png)\n\n##### 10.4 Using where\n\n表示使用了 `WHERE` 过滤\n\n![ZHKnyQ.png](https://s2.ax1x.com/2019/07/16/ZHKnyQ.png)\n\n##### 10.5 Using join buffer\n\n> 使用了连接缓存\n\n##### 10.6 Impossible where\n\n`WHERE` 子句的值总是 False ， 不能用来获取任何数据列。\n\n![ZHQnVs.png](https://s2.ax1x.com/2019/07/16/ZHQnVs.png)\n\n## 九、避免索引失效\n\n### 1. 全值匹配\n\n对于联合索引，在 `WHERE` 子查询是尽量使用所有索引列来过滤查询\n\n### 2. 最左前缀原则\n\n联合索引下，查询从索引的最左前列开始并且**不能跳过索引中间的列**\n\n![ZH1O2V.png](https://s2.ax1x.com/2019/07/16/ZH1O2V.png)\n\n### 3. 不在索引列上做任何操作\n\n不要在索引列上进行 计算、函数、（自动或手动）类型转换，否则会导致索引失效而转向全表扫描。\n\n![ZH1c4I.png](https://s2.ax1x.com/2019/07/16/ZH1c4I.png)\n\n### 4. 范围条件查询会导致右边的索引失效\n\n![ZHJQi9.png](https://s2.ax1x.com/2019/07/16/ZHJQi9.png)\n\n**解释：**  \n当我们三个索引都使用时， `key_len` 为 107，在使用前两个索引时， `key_len` 值为 40  \n此时，我们在 `WHERE` 子查询过滤条件中使用了范围条件，从而导致索引 `addr` 失效。\n\n### 5. 尽量使用覆盖索引，减少 `SELECT * ` 的使用\n\n### 6. 使用不等于(!= 或 <>) 会导致索引失效\n\n![ZHarb6.png](https://s2.ax1x.com/2019/07/16/ZHarb6.png)\n\n### 7. is null, is not null 也会导致索引失效\n\n![ZH7FYD.png](https://s2.ax1x.com/2019/07/16/ZH7FYD.png)\n\n### 8. LIKE 以通配符开头 ('%字符串') 会导致索引失效\n\n![ZHHc8g.png](https://s2.ax1x.com/2019/07/16/ZHHc8g.png)\n\n**解决办法**  \n可以使用以通配符结尾来检索 `'字符串%'`\n\n### 9. 字符串不加引号会导致索引失效\n\n![ZHb1Mj.png](https://s2.ax1x.com/2019/07/16/ZHb1Mj.png)\n\n**解释**  \n第 3 条里说道，不要自动或手动做类型转换。  \n这里 `20000` 为字符串，当我们在查询时不加引号的话，那么 MySQL 会自动做类型转换，导致索引失效\n\n### 10. 少用 OR，会导致索引失效\n\n![ZHqkfU.png](https://s2.ax1x.com/2019/07/16/ZHqkfU.png)\n","slug":"数据库索引优化","published":1,"updated":"2019-07-18T14:02:37.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy8tn1710008m6www54kcmge","content":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>对于数据库的优化主要包括三个部分：查询优化、索引优化和字段类型优化，其中，索引优化则是数据库优化的重中之重。一个查询使用索引与不使用索引的差别可能只在100个数量级，而一个好的索引与不好的索引差别可能在1000个数量级，但是一个最优的索引与普通的索引查询效率可能就相差上万甚至更高的数量级。本文主要重点讲解数据库索引的优化。</p><a id=\"more\"></a><h2 id=\"一、-SQL性能下降原因\"><a href=\"#一、-SQL性能下降原因\" class=\"headerlink\" title=\"一、 SQL性能下降原因\"></a>一、 SQL性能下降原因</h2><blockquote><p>性能下降SQL慢<br>执行时间长<br>等待时间长</p></blockquote><ol><li>查询语句写的烂</li><li>索引失效</li><li>关联查询太多join（设计缺陷或不得已需求）</li><li>服务器调优以及各个参数设置（缓冲，线程数等）</li></ol><h2 id=\"二、七种Jion\"><a href=\"#二、七种Jion\" class=\"headerlink\" title=\"二、七种Jion\"></a>二、七种Jion</h2><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg\" alt=\"\"></p><h2 id=\"三、-索引\"><a href=\"#三、-索引\" class=\"headerlink\" title=\"三、 索引\"></a>三、 索引</h2><h3 id=\"1-创建索引\"><a href=\"#1-创建索引\" class=\"headerlink\" title=\"1. 创建索引\"></a>1. 创建索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 唯一索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> index_name (column_lsit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主键索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">column</span>)</span><br></pre></td></tr></table></figure><h3 id=\"2-查看索引\"><a href=\"#2-查看索引\" class=\"headerlink\" title=\"2. 查看索引\"></a>2. 查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">INDEX</span> <span class=\"keyword\">FROM</span> table_name</span><br></pre></td></tr></table></figure><h3 id=\"3-删除索引\"><a href=\"#3-删除索引\" class=\"headerlink\" title=\"3. 删除索引\"></a>3. 删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> [index_name] <span class=\"keyword\">ON</span> table_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg:删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> PRIMARY <span class=\"keyword\">KEY</span></span><br></pre></td></tr></table></figure><h2 id=\"四、哪些情况需要建立索引\"><a href=\"#四、哪些情况需要建立索引\" class=\"headerlink\" title=\"四、哪些情况需要建立索引\"></a>四、哪些情况需要建立索引</h2><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该建立索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>单值索引与组合索引的选择：高并发下倾向于组合索引</li><li>查询中排序的字段，若通过索引去访问将大大提高排序速度</li><li>查询中统计或分组的段</li></ol><h2 id=\"五、哪些情况不要建立索引\"><a href=\"#五、哪些情况不要建立索引\" class=\"headerlink\" title=\"五、哪些情况不要建立索引\"></a>五、哪些情况不要建立索引</h2><ol><li>表记录过少</li><li>经常增删改的表<br>为了提高查询速度，同时却会降低更新表的速度。因为更新表时，不仅要保存数据，还要更新索引文件。</li><li>数据重复且分布均匀的表字段，因此应该只为最经常查询和排序的数据列建立索引</li><li>频繁更新的字段不适合创建索引<br>更新索引，加重了IO负担</li><li>where条件里用不到的字段不创建索引</li></ol><h2 id=\"六、增加索引带来的问题\"><a href=\"#六、增加索引带来的问题\" class=\"headerlink\" title=\"六、增加索引带来的问题\"></a>六、增加索引带来的问题</h2><ol><li>创建索引和维护索引需要耗费时间，并且随着数据量的增加所耗费的时间也会增加</li><li>索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li>当对表中的数据进行增删改是，索引也需要动态的维护，这样就降低了数据的维护速度。</li></ol><h2 id=\"七、性能分析\"><a href=\"#七、性能分析\" class=\"headerlink\" title=\"七、性能分析\"></a>七、性能分析</h2><blockquote><p>使用 <code>EXPLAIN</code> 关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的，从而进行优化</p></blockquote><h3 id=\"1-具体能干嘛\"><a href=\"#1-具体能干嘛\" class=\"headerlink\" title=\"1. 具体能干嘛\"></a>1. 具体能干嘛</h3><ol><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol><h3 id=\"2-具体怎么用\"><a href=\"#2-具体怎么用\" class=\"headerlink\" title=\"2. 具体怎么用\"></a>2. 具体怎么用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPLAIN</span> + <span class=\"keyword\">SQL</span>语句</span><br></pre></td></tr></table></figure><h5 id=\"返回的信息：\"><a href=\"#返回的信息：\" class=\"headerlink\" title=\"返回的信息：\"></a>返回的信息：</h5><p><img src=\"https://s2.ax1x.com/2019/07/15/ZTyU1g.png\" alt=\"ZTyU1g.png\"></p><h2 id=\"八、-EXPLAIN-各个名词的解释\"><a href=\"#八、-EXPLAIN-各个名词的解释\" class=\"headerlink\" title=\"八、 EXPLAIN 各个名词的解释\"></a>八、 EXPLAIN 各个名词的解释</h2><h3 id=\"1-id\"><a href=\"#1-id\" class=\"headerlink\" title=\"1. id\"></a>1. id</h3><blockquote><p>select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p></blockquote><h5 id=\"四种情况\"><a href=\"#四种情况\" class=\"headerlink\" title=\"四种情况\"></a>四种情况</h5><ul><li>id 相同： 执行顺序由上至下</li><li>id 不同：id 值越大，优先级越高，越先被执行</li><li>id 有相同也有不同，首先执行 id 值大的语句，id 值相同的，由上至下顺序执行</li><li>null 表示用来合并结果集，在SQL中使用 <code>UNION</code> 关键字合并结果集就会出现它</li></ul><h3 id=\"2-select-type\"><a href=\"#2-select-type\" class=\"headerlink\" title=\"2. select_type\"></a>2. select_type</h3><blockquote><p>指定所使用的 <code>SELECT</code> 查询类型，主要用于区别普通查询、联合查询、子查询等复杂查询</p></blockquote><h5 id=\"2-1-SIMPLE\"><a href=\"#2-1-SIMPLE\" class=\"headerlink\" title=\"2.1 SIMPLE\"></a>2.1 SIMPLE</h5><p>简单的 <code>SELECT</code> 查询，查询不包含子查询或者UNION</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IJvq.png\" alt=\"Z7IJvq.png\"></p><h5 id=\"2-2-PRIMARY\"><a href=\"#2-2-PRIMARY\" class=\"headerlink\" title=\"2.2 PRIMARY\"></a>2.2 PRIMARY</h5><p>查询中最外层的SELECT（如两表做UNION或者存在子查询的外层的表操作为PRIMARY，内层的操作为UNION）</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IHMt.png\" alt=\"Z7IHMt.png\"></p><h5 id=\"2-3-SUBQUERY\"><a href=\"#2-3-SUBQUERY\" class=\"headerlink\" title=\"2.3 SUBQUERY\"></a>2.3 SUBQUERY</h5><p>在 <code>SELECT</code> 或 <code>WHERE</code> 中包含了子查询中的首个 <code>SELECT</code> (如果有多个子查询存在)</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IHMt.png\" alt=\"Z7IHMt.png\"></p><h5 id=\"2-4-DEPENDENT-SUBQUERY\"><a href=\"#2-4-DEPENDENT-SUBQUERY\" class=\"headerlink\" title=\"2.4 DEPENDENT SUBQUERY\"></a>2.4 DEPENDENT SUBQUERY</h5><p>子查询中首个 <code>SELECT</code>，但依赖于外层的表（如果有多个子查询存在）</p><p><strong>重点解释</strong><br>子查询的查询方式依赖于外面的查询结果.用这个例子就是,先进行子查询外部的查询,得到一个结果集,.然后这个结果的每一行在跟select子查询的结果集进行匹配,也就是说,外部结果集的每一行都要关联内部结果集一次</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7Tvgs.png\" alt=\"Z7Tvgs.png\"></p><h5 id=\"2-5-DERIVED\"><a href=\"#2-5-DERIVED\" class=\"headerlink\" title=\"2.5 DERIVED\"></a>2.5 DERIVED</h5><p>在 <code>FROM</code> 列表中包含的子查询被标记为 <code>DERIVED(衍生)</code>，MySQL会递归执行这些子查询，把结果放在临时表里。</p><h5 id=\"2-6-UNION\"><a href=\"#2-6-UNION\" class=\"headerlink\" title=\"2.6 UNION\"></a>2.6 UNION</h5><p>若第二个 <code>SELECT</code> 出现在 <code>UNION</code> 之后，则会被标记为UNION；若UNION包含在 <code>FROM</code> 子句的子查询中，外层的 <code>SELECT</code> 将会被标记为 <code>DERIVED</code></p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7HXXn.png\" alt=\"Z7HXXn.png\"></p><h5 id=\"2-7-UNIOIN-RESULT\"><a href=\"#2-7-UNIOIN-RESULT\" class=\"headerlink\" title=\"2.7 UNIOIN RESULT\"></a>2.7 UNIOIN RESULT</h5><p>UNION操作的结果，id值通常为NULL</p><h3 id=\"3-table\"><a href=\"#3-table\" class=\"headerlink\" title=\"3.table\"></a>3.table</h3><blockquote><p>显示这一行的数据是关于哪一张表的</p></blockquote><h3 id=\"4-type\"><a href=\"#4-type\" class=\"headerlink\" title=\"4.type\"></a>4.type</h3><blockquote><p>表示访问类型，通俗解释就是MySQL查找数据列的方式。</p></blockquote><p>下边从最优到最差的顺序分别介绍</p><h5 id=\"4-1-system\"><a href=\"#4-1-system\" class=\"headerlink\" title=\"4.1 system\"></a>4.1 system</h5><p>表中只有一条数据. 这个类型是特殊的 <code>const</code> 类型</p><h5 id=\"4-2-const\"><a href=\"#4-2-const\" class=\"headerlink\" title=\"4.2 const\"></a>4.2 const</h5><p>表示通过索引一次就找到了数据列，<code>const</code> 用于比较 <code>primary key</code> 或者 <code>unique</code> 索引。因为只匹配一行数据，所以查询速度很快。<br>比如将主键当做 <code>WHERE</code> 条件去查询，MySQL可以将这个查询转换为一个常量。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHS7b4.png\" alt=\"\"></p><h5 id=\"4-3-eq-ref\"><a href=\"#4-3-eq-ref\" class=\"headerlink\" title=\"4.3 eq_ref\"></a>4.3 eq_ref</h5><p>唯一性索引扫描，对于每一个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHp9qe.png\" alt=\"\"></p><h5 id=\"4-4-ref\"><a href=\"#4-4-ref\" class=\"headerlink\" title=\"4.4 ref\"></a>4.4 ref</h5><p>针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询，返回匹配某个单独值的所有行。<br>本质上也是一种索引访问，它返回所有匹配某个单独值的行，但是它可能会找到多个符合条件的 行，所以它应该属于查找和扫描的混合体。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHCwCR.png\" alt=\"ZHCwCR.png\"></p><h5 id=\"4-5-range\"><a href=\"#4-5-range\" class=\"headerlink\" title=\"4.5 range\"></a>4.5 range</h5><p>只检索给定范围的行，使用一个索引来选择行。 <code>key</code> 列显示使用了哪个索引。<br>一般是在 <code>WHERE</code> 语句中出现了 <code>between</code> <code>&lt;</code> <code>&gt;</code> <code>in</code> 等的查询。<br>这种范围扫描索引比全表扫描索引要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHPIY9.png\" alt=\"ZHPIY9.png\"></p><h5 id=\"4-6-index\"><a href=\"#4-6-index\" class=\"headerlink\" title=\"4.6 index\"></a>4.6 index</h5><p>表示全索引扫描，<code>index</code> 与 <code>ALL</code> 的区别在于 <code>index</code> 类型只遍历索引树。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHFiC9.png\" alt=\"ZHFiC9.png\"></p><h5 id=\"4-7-ALL\"><a href=\"#4-7-ALL\" class=\"headerlink\" title=\"4.7 ALL\"></a>4.7 ALL</h5><p>全表扫描，没有用到任何的index，效率最差。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHFDvq.png\" alt=\"ZHFDvq.png\"></p><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>从最好到最差依次是：<br>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</p><p>一般来说，得保证查询至少达到 <code>range</code> 级别，最好能达到 <code>ref</code></p><h3 id=\"5-possible-keys\"><a href=\"#5-possible-keys\" class=\"headerlink\" title=\"5. possible_keys\"></a>5. possible_keys</h3><blockquote><p>显示可能应用在这张表中的索引，一个或多个。<br>查询涉及的字段若存在索引，则改索引将被列出，<strong>但不一定被查询实际用到</strong></p></blockquote><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHE9US.png\" alt=\"ZHE9US.png\"></p><h3 id=\"6-key\"><a href=\"#6-key\" class=\"headerlink\" title=\"6. key\"></a>6. key</h3><blockquote><p>实际中用到的索引，如果为 <code>NULL</code> 则表示没有用到索引<br>如查询中用到了覆盖索引，则该索引和查询的 <code>SELECT</code> 字段重叠</p></blockquote><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHEDxA.png\" alt=\"ZHEDxA.png\"></p><p><em>覆盖索引：在本例中：我在 <code>addr</code> 和 <code>email</code> 上建立聚合索引，在查询时也查询的是 <code>addr</code> 和 <code>email</code> 这两个字段，所以刚好和索引匹配了。</em><br><em>当发起一个被索引覆盖的查询(也叫作索引覆盖查询)时，在 <code>Extra</code> 列可以看到 <code>Using index</code> 的信息</em></p><h3 id=\"7-key-len\"><a href=\"#7-key-len\" class=\"headerlink\" title=\"7. key_len\"></a>7. key_len</h3><blockquote><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。<br><code>key_len</code> 显示的值为索引字段的最大可能长度，<strong>并非实际使用长度</strong>，即 <code>key_len</code> 是根据表定义计算而得，不是通过表内检索出的。</p></blockquote><h3 id=\"8-ref\"><a href=\"#8-ref\" class=\"headerlink\" title=\"8. ref\"></a>8. ref</h3><blockquote><p>显示索引的哪一列被使用了，如果可能的话，是一个常数。<br>常见的值有 <code>const</code>, <code>func</code>, <code>NULL</code>, 具体字段名。当 <code>key</code> 列为 <code>NULL</code> ，即不使用索引时 。如果值是 <code>func</code>，则使用的值是某个函数的结果</p></blockquote><h3 id=\"9-rows\"><a href=\"#9-rows\" class=\"headerlink\" title=\"9. rows\"></a>9. rows</h3><blockquote><p>根据表统计信息及索引使用情况，大致估算出找到所需的记录所需要读取的行数。<br>简单且重要，数值越大越不好，说明没有用好索引</p></blockquote><h3 id=\"10-Extra\"><a href=\"#10-Extra\" class=\"headerlink\" title=\"10. Extra\"></a>10. Extra</h3><blockquote><p>该列包含 MySQL 查询的详细信息。</p></blockquote><h5 id=\"10-1-Using-filesort-出现这个表示效果不好\"><a href=\"#10-1-Using-filesort-出现这个表示效果不好\" class=\"headerlink\" title=\"10.1 Using filesort (出现这个表示效果不好)\"></a>10.1 Using filesort (出现这个表示效果不好)</h5><p>说明 MySQL 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。<br>MySQL 中无法利用索引完成的排序操作称为“文件排序”</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHmtQH.png\" alt=\"ZHmtQH.png\"></p><h5 id=\"10-2-Using-temporary-出现这个表示效果不好\"><a href=\"#10-2-Using-temporary-出现这个表示效果不好\" class=\"headerlink\" title=\"10.2 Using temporary (出现这个表示效果不好)\"></a>10.2 Using temporary (出现这个表示效果不好)</h5><p>使用了临时表保存中间结果，MySQL 在对查询结果进行排序是使用临时表。<br>常见于排序 <code>ORDER BY</code> 和分组查询 <code>GROUP BY</code></p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHn5DA.png\" alt=\"ZHn5DA.png\"></p><h5 id=\"10-3-Using-index-出现这个表示效果好\"><a href=\"#10-3-Using-index-出现这个表示效果好\" class=\"headerlink\" title=\"10.3 Using index (出现这个表示效果好)\"></a>10.3 Using index (出现这个表示效果好)</h5><p>表示相应的 <code>SELECT</code> 操作中使用了覆盖索引，避免访问了表的数据行，效率不错。<br>如果同时出现 <code>Using where</code> 表示索引被用来执行索引键值的查找<br>如果没有出现 <code>Using where</code> 表示索引用来读取数据而非执行查找动作。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHEDxA.png\" alt=\"ZHEDxA.png\"></p><h5 id=\"10-4-Using-where\"><a href=\"#10-4-Using-where\" class=\"headerlink\" title=\"10.4 Using where\"></a>10.4 Using where</h5><p>表示使用了 <code>WHERE</code> 过滤</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHKnyQ.png\" alt=\"ZHKnyQ.png\"></p><h5 id=\"10-5-Using-join-buffer\"><a href=\"#10-5-Using-join-buffer\" class=\"headerlink\" title=\"10.5 Using join buffer\"></a>10.5 Using join buffer</h5><blockquote><p>使用了连接缓存</p></blockquote><h5 id=\"10-6-Impossible-where\"><a href=\"#10-6-Impossible-where\" class=\"headerlink\" title=\"10.6 Impossible where\"></a>10.6 Impossible where</h5><p><code>WHERE</code> 子句的值总是 False ， 不能用来获取任何数据列。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHQnVs.png\" alt=\"ZHQnVs.png\"></p><h2 id=\"九、避免索引失效\"><a href=\"#九、避免索引失效\" class=\"headerlink\" title=\"九、避免索引失效\"></a>九、避免索引失效</h2><h3 id=\"1-全值匹配\"><a href=\"#1-全值匹配\" class=\"headerlink\" title=\"1. 全值匹配\"></a>1. 全值匹配</h3><p>对于联合索引，在 <code>WHERE</code> 子查询是尽量使用所有索引列来过滤查询</p><h3 id=\"2-最左前缀原则\"><a href=\"#2-最左前缀原则\" class=\"headerlink\" title=\"2. 最左前缀原则\"></a>2. 最左前缀原则</h3><p>联合索引下，查询从索引的最左前列开始并且<strong>不能跳过索引中间的列</strong></p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH1O2V.png\" alt=\"ZH1O2V.png\"></p><h3 id=\"3-不在索引列上做任何操作\"><a href=\"#3-不在索引列上做任何操作\" class=\"headerlink\" title=\"3. 不在索引列上做任何操作\"></a>3. 不在索引列上做任何操作</h3><p>不要在索引列上进行 计算、函数、（自动或手动）类型转换，否则会导致索引失效而转向全表扫描。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH1c4I.png\" alt=\"ZH1c4I.png\"></p><h3 id=\"4-范围条件查询会导致右边的索引失效\"><a href=\"#4-范围条件查询会导致右边的索引失效\" class=\"headerlink\" title=\"4. 范围条件查询会导致右边的索引失效\"></a>4. 范围条件查询会导致右边的索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHJQi9.png\" alt=\"ZHJQi9.png\"></p><p><strong>解释：</strong><br>当我们三个索引都使用时， <code>key_len</code> 为 107，在使用前两个索引时， <code>key_len</code> 值为 40<br>此时，我们在 <code>WHERE</code> 子查询过滤条件中使用了范围条件，从而导致索引 <code>addr</code> 失效。</p><h3 id=\"5-尽量使用覆盖索引，减少-SELECT-的使用\"><a href=\"#5-尽量使用覆盖索引，减少-SELECT-的使用\" class=\"headerlink\" title=\"5. 尽量使用覆盖索引，减少 SELECT * 的使用\"></a>5. 尽量使用覆盖索引，减少 <code>SELECT *</code> 的使用</h3><h3 id=\"6-使用不等于-或-lt-gt-会导致索引失效\"><a href=\"#6-使用不等于-或-lt-gt-会导致索引失效\" class=\"headerlink\" title=\"6. 使用不等于(!= 或 &lt;&gt;) 会导致索引失效\"></a>6. 使用不等于(!= 或 &lt;&gt;) 会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHarb6.png\" alt=\"ZHarb6.png\"></p><h3 id=\"7-is-null-is-not-null-也会导致索引失效\"><a href=\"#7-is-null-is-not-null-也会导致索引失效\" class=\"headerlink\" title=\"7. is null, is not null 也会导致索引失效\"></a>7. is null, is not null 也会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH7FYD.png\" alt=\"ZH7FYD.png\"></p><h3 id=\"8-LIKE-以通配符开头-‘-字符串’-会导致索引失效\"><a href=\"#8-LIKE-以通配符开头-‘-字符串’-会导致索引失效\" class=\"headerlink\" title=\"8. LIKE 以通配符开头 (‘%字符串’) 会导致索引失效\"></a>8. LIKE 以通配符开头 (‘%字符串’) 会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHHc8g.png\" alt=\"ZHHc8g.png\"></p><p><strong>解决办法</strong><br>可以使用以通配符结尾来检索 <code>&#39;字符串%&#39;</code></p><h3 id=\"9-字符串不加引号会导致索引失效\"><a href=\"#9-字符串不加引号会导致索引失效\" class=\"headerlink\" title=\"9. 字符串不加引号会导致索引失效\"></a>9. 字符串不加引号会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHb1Mj.png\" alt=\"ZHb1Mj.png\"></p><p><strong>解释</strong><br>第 3 条里说道，不要自动或手动做类型转换。<br>这里 <code>20000</code> 为字符串，当我们在查询时不加引号的话，那么 MySQL 会自动做类型转换，导致索引失效</p><h3 id=\"10-少用-OR，会导致索引失效\"><a href=\"#10-少用-OR，会导致索引失效\" class=\"headerlink\" title=\"10. 少用 OR，会导致索引失效\"></a>10. 少用 OR，会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHqkfU.png\" alt=\"ZHqkfU.png\"></p><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"<!-- build time:Thu Jul 18 2019 23:20:30 GMT+0800 (中国标准时间) --><p>对于数据库的优化主要包括三个部分：查询优化、索引优化和字段类型优化，其中，索引优化则是数据库优化的重中之重。一个查询使用索引与不使用索引的差别可能只在100个数量级，而一个好的索引与不好的索引差别可能在1000个数量级，但是一个最优的索引与普通的索引查询效率可能就相差上万甚至更高的数量级。本文主要重点讲解数据库索引的优化。</p>","more":"<h2 id=\"一、-SQL性能下降原因\"><a href=\"#一、-SQL性能下降原因\" class=\"headerlink\" title=\"一、 SQL性能下降原因\"></a>一、 SQL性能下降原因</h2><blockquote><p>性能下降SQL慢<br>执行时间长<br>等待时间长</p></blockquote><ol><li>查询语句写的烂</li><li>索引失效</li><li>关联查询太多join（设计缺陷或不得已需求）</li><li>服务器调优以及各个参数设置（缓冲，线程数等）</li></ol><h2 id=\"二、七种Jion\"><a href=\"#二、七种Jion\" class=\"headerlink\" title=\"二、七种Jion\"></a>二、七种Jion</h2><p><img src=\"https://s2.ax1x.com/2019/04/27/EKfW8I.md.jpg\" alt=\"\"></p><h2 id=\"三、-索引\"><a href=\"#三、-索引\" class=\"headerlink\" title=\"三、 索引\"></a>三、 索引</h2><h3 id=\"1-创建索引\"><a href=\"#1-创建索引\" class=\"headerlink\" title=\"1. 创建索引\"></a>1. 创建索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 唯一索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> index_name (column_lsit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主键索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">column</span>)</span><br></pre></td></tr></table></figure><h3 id=\"2-查看索引\"><a href=\"#2-查看索引\" class=\"headerlink\" title=\"2. 查看索引\"></a>2. 查看索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">INDEX</span> <span class=\"keyword\">FROM</span> table_name</span><br></pre></td></tr></table></figure><h3 id=\"3-删除索引\"><a href=\"#3-删除索引\" class=\"headerlink\" title=\"3. 删除索引\"></a>3. 删除索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> [index_name] <span class=\"keyword\">ON</span> table_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg:删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> PRIMARY <span class=\"keyword\">KEY</span></span><br></pre></td></tr></table></figure><h2 id=\"四、哪些情况需要建立索引\"><a href=\"#四、哪些情况需要建立索引\" class=\"headerlink\" title=\"四、哪些情况需要建立索引\"></a>四、哪些情况需要建立索引</h2><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该建立索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>单值索引与组合索引的选择：高并发下倾向于组合索引</li><li>查询中排序的字段，若通过索引去访问将大大提高排序速度</li><li>查询中统计或分组的段</li></ol><h2 id=\"五、哪些情况不要建立索引\"><a href=\"#五、哪些情况不要建立索引\" class=\"headerlink\" title=\"五、哪些情况不要建立索引\"></a>五、哪些情况不要建立索引</h2><ol><li>表记录过少</li><li>经常增删改的表<br>为了提高查询速度，同时却会降低更新表的速度。因为更新表时，不仅要保存数据，还要更新索引文件。</li><li>数据重复且分布均匀的表字段，因此应该只为最经常查询和排序的数据列建立索引</li><li>频繁更新的字段不适合创建索引<br>更新索引，加重了IO负担</li><li>where条件里用不到的字段不创建索引</li></ol><h2 id=\"六、增加索引带来的问题\"><a href=\"#六、增加索引带来的问题\" class=\"headerlink\" title=\"六、增加索引带来的问题\"></a>六、增加索引带来的问题</h2><ol><li>创建索引和维护索引需要耗费时间，并且随着数据量的增加所耗费的时间也会增加</li><li>索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li>当对表中的数据进行增删改是，索引也需要动态的维护，这样就降低了数据的维护速度。</li></ol><h2 id=\"七、性能分析\"><a href=\"#七、性能分析\" class=\"headerlink\" title=\"七、性能分析\"></a>七、性能分析</h2><blockquote><p>使用 <code>EXPLAIN</code> 关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的，从而进行优化</p></blockquote><h3 id=\"1-具体能干嘛\"><a href=\"#1-具体能干嘛\" class=\"headerlink\" title=\"1. 具体能干嘛\"></a>1. 具体能干嘛</h3><ol><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol><h3 id=\"2-具体怎么用\"><a href=\"#2-具体怎么用\" class=\"headerlink\" title=\"2. 具体怎么用\"></a>2. 具体怎么用</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPLAIN</span> + <span class=\"keyword\">SQL</span>语句</span><br></pre></td></tr></table></figure><h5 id=\"返回的信息：\"><a href=\"#返回的信息：\" class=\"headerlink\" title=\"返回的信息：\"></a>返回的信息：</h5><p><img src=\"https://s2.ax1x.com/2019/07/15/ZTyU1g.png\" alt=\"ZTyU1g.png\"></p><h2 id=\"八、-EXPLAIN-各个名词的解释\"><a href=\"#八、-EXPLAIN-各个名词的解释\" class=\"headerlink\" title=\"八、 EXPLAIN 各个名词的解释\"></a>八、 EXPLAIN 各个名词的解释</h2><h3 id=\"1-id\"><a href=\"#1-id\" class=\"headerlink\" title=\"1. id\"></a>1. id</h3><blockquote><p>select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p></blockquote><h5 id=\"四种情况\"><a href=\"#四种情况\" class=\"headerlink\" title=\"四种情况\"></a>四种情况</h5><ul><li>id 相同： 执行顺序由上至下</li><li>id 不同：id 值越大，优先级越高，越先被执行</li><li>id 有相同也有不同，首先执行 id 值大的语句，id 值相同的，由上至下顺序执行</li><li>null 表示用来合并结果集，在SQL中使用 <code>UNION</code> 关键字合并结果集就会出现它</li></ul><h3 id=\"2-select-type\"><a href=\"#2-select-type\" class=\"headerlink\" title=\"2. select_type\"></a>2. select_type</h3><blockquote><p>指定所使用的 <code>SELECT</code> 查询类型，主要用于区别普通查询、联合查询、子查询等复杂查询</p></blockquote><h5 id=\"2-1-SIMPLE\"><a href=\"#2-1-SIMPLE\" class=\"headerlink\" title=\"2.1 SIMPLE\"></a>2.1 SIMPLE</h5><p>简单的 <code>SELECT</code> 查询，查询不包含子查询或者UNION</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IJvq.png\" alt=\"Z7IJvq.png\"></p><h5 id=\"2-2-PRIMARY\"><a href=\"#2-2-PRIMARY\" class=\"headerlink\" title=\"2.2 PRIMARY\"></a>2.2 PRIMARY</h5><p>查询中最外层的SELECT（如两表做UNION或者存在子查询的外层的表操作为PRIMARY，内层的操作为UNION）</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IHMt.png\" alt=\"Z7IHMt.png\"></p><h5 id=\"2-3-SUBQUERY\"><a href=\"#2-3-SUBQUERY\" class=\"headerlink\" title=\"2.3 SUBQUERY\"></a>2.3 SUBQUERY</h5><p>在 <code>SELECT</code> 或 <code>WHERE</code> 中包含了子查询中的首个 <code>SELECT</code> (如果有多个子查询存在)</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7IHMt.png\" alt=\"Z7IHMt.png\"></p><h5 id=\"2-4-DEPENDENT-SUBQUERY\"><a href=\"#2-4-DEPENDENT-SUBQUERY\" class=\"headerlink\" title=\"2.4 DEPENDENT SUBQUERY\"></a>2.4 DEPENDENT SUBQUERY</h5><p>子查询中首个 <code>SELECT</code>，但依赖于外层的表（如果有多个子查询存在）</p><p><strong>重点解释</strong><br>子查询的查询方式依赖于外面的查询结果.用这个例子就是,先进行子查询外部的查询,得到一个结果集,.然后这个结果的每一行在跟select子查询的结果集进行匹配,也就是说,外部结果集的每一行都要关联内部结果集一次</p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7Tvgs.png\" alt=\"Z7Tvgs.png\"></p><h5 id=\"2-5-DERIVED\"><a href=\"#2-5-DERIVED\" class=\"headerlink\" title=\"2.5 DERIVED\"></a>2.5 DERIVED</h5><p>在 <code>FROM</code> 列表中包含的子查询被标记为 <code>DERIVED(衍生)</code>，MySQL会递归执行这些子查询，把结果放在临时表里。</p><h5 id=\"2-6-UNION\"><a href=\"#2-6-UNION\" class=\"headerlink\" title=\"2.6 UNION\"></a>2.6 UNION</h5><p>若第二个 <code>SELECT</code> 出现在 <code>UNION</code> 之后，则会被标记为UNION；若UNION包含在 <code>FROM</code> 子句的子查询中，外层的 <code>SELECT</code> 将会被标记为 <code>DERIVED</code></p><p><img src=\"https://s2.ax1x.com/2019/07/16/Z7HXXn.png\" alt=\"Z7HXXn.png\"></p><h5 id=\"2-7-UNIOIN-RESULT\"><a href=\"#2-7-UNIOIN-RESULT\" class=\"headerlink\" title=\"2.7 UNIOIN RESULT\"></a>2.7 UNIOIN RESULT</h5><p>UNION操作的结果，id值通常为NULL</p><h3 id=\"3-table\"><a href=\"#3-table\" class=\"headerlink\" title=\"3.table\"></a>3.table</h3><blockquote><p>显示这一行的数据是关于哪一张表的</p></blockquote><h3 id=\"4-type\"><a href=\"#4-type\" class=\"headerlink\" title=\"4.type\"></a>4.type</h3><blockquote><p>表示访问类型，通俗解释就是MySQL查找数据列的方式。</p></blockquote><p>下边从最优到最差的顺序分别介绍</p><h5 id=\"4-1-system\"><a href=\"#4-1-system\" class=\"headerlink\" title=\"4.1 system\"></a>4.1 system</h5><p>表中只有一条数据. 这个类型是特殊的 <code>const</code> 类型</p><h5 id=\"4-2-const\"><a href=\"#4-2-const\" class=\"headerlink\" title=\"4.2 const\"></a>4.2 const</h5><p>表示通过索引一次就找到了数据列，<code>const</code> 用于比较 <code>primary key</code> 或者 <code>unique</code> 索引。因为只匹配一行数据，所以查询速度很快。<br>比如将主键当做 <code>WHERE</code> 条件去查询，MySQL可以将这个查询转换为一个常量。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHS7b4.png\" alt=\"\"></p><h5 id=\"4-3-eq-ref\"><a href=\"#4-3-eq-ref\" class=\"headerlink\" title=\"4.3 eq_ref\"></a>4.3 eq_ref</h5><p>唯一性索引扫描，对于每一个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHp9qe.png\" alt=\"\"></p><h5 id=\"4-4-ref\"><a href=\"#4-4-ref\" class=\"headerlink\" title=\"4.4 ref\"></a>4.4 ref</h5><p>针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询，返回匹配某个单独值的所有行。<br>本质上也是一种索引访问，它返回所有匹配某个单独值的行，但是它可能会找到多个符合条件的 行，所以它应该属于查找和扫描的混合体。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHCwCR.png\" alt=\"ZHCwCR.png\"></p><h5 id=\"4-5-range\"><a href=\"#4-5-range\" class=\"headerlink\" title=\"4.5 range\"></a>4.5 range</h5><p>只检索给定范围的行，使用一个索引来选择行。 <code>key</code> 列显示使用了哪个索引。<br>一般是在 <code>WHERE</code> 语句中出现了 <code>between</code> <code>&lt;</code> <code>&gt;</code> <code>in</code> 等的查询。<br>这种范围扫描索引比全表扫描索引要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHPIY9.png\" alt=\"ZHPIY9.png\"></p><h5 id=\"4-6-index\"><a href=\"#4-6-index\" class=\"headerlink\" title=\"4.6 index\"></a>4.6 index</h5><p>表示全索引扫描，<code>index</code> 与 <code>ALL</code> 的区别在于 <code>index</code> 类型只遍历索引树。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHFiC9.png\" alt=\"ZHFiC9.png\"></p><h5 id=\"4-7-ALL\"><a href=\"#4-7-ALL\" class=\"headerlink\" title=\"4.7 ALL\"></a>4.7 ALL</h5><p>全表扫描，没有用到任何的index，效率最差。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHFDvq.png\" alt=\"ZHFDvq.png\"></p><h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>从最好到最差依次是：<br>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</p><p>一般来说，得保证查询至少达到 <code>range</code> 级别，最好能达到 <code>ref</code></p><h3 id=\"5-possible-keys\"><a href=\"#5-possible-keys\" class=\"headerlink\" title=\"5. possible_keys\"></a>5. possible_keys</h3><blockquote><p>显示可能应用在这张表中的索引，一个或多个。<br>查询涉及的字段若存在索引，则改索引将被列出，<strong>但不一定被查询实际用到</strong></p></blockquote><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHE9US.png\" alt=\"ZHE9US.png\"></p><h3 id=\"6-key\"><a href=\"#6-key\" class=\"headerlink\" title=\"6. key\"></a>6. key</h3><blockquote><p>实际中用到的索引，如果为 <code>NULL</code> 则表示没有用到索引<br>如查询中用到了覆盖索引，则该索引和查询的 <code>SELECT</code> 字段重叠</p></blockquote><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHEDxA.png\" alt=\"ZHEDxA.png\"></p><p><em>覆盖索引：在本例中：我在 <code>addr</code> 和 <code>email</code> 上建立聚合索引，在查询时也查询的是 <code>addr</code> 和 <code>email</code> 这两个字段，所以刚好和索引匹配了。</em><br><em>当发起一个被索引覆盖的查询(也叫作索引覆盖查询)时，在 <code>Extra</code> 列可以看到 <code>Using index</code> 的信息</em></p><h3 id=\"7-key-len\"><a href=\"#7-key-len\" class=\"headerlink\" title=\"7. key_len\"></a>7. key_len</h3><blockquote><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。<br><code>key_len</code> 显示的值为索引字段的最大可能长度，<strong>并非实际使用长度</strong>，即 <code>key_len</code> 是根据表定义计算而得，不是通过表内检索出的。</p></blockquote><h3 id=\"8-ref\"><a href=\"#8-ref\" class=\"headerlink\" title=\"8. ref\"></a>8. ref</h3><blockquote><p>显示索引的哪一列被使用了，如果可能的话，是一个常数。<br>常见的值有 <code>const</code>, <code>func</code>, <code>NULL</code>, 具体字段名。当 <code>key</code> 列为 <code>NULL</code> ，即不使用索引时 。如果值是 <code>func</code>，则使用的值是某个函数的结果</p></blockquote><h3 id=\"9-rows\"><a href=\"#9-rows\" class=\"headerlink\" title=\"9. rows\"></a>9. rows</h3><blockquote><p>根据表统计信息及索引使用情况，大致估算出找到所需的记录所需要读取的行数。<br>简单且重要，数值越大越不好，说明没有用好索引</p></blockquote><h3 id=\"10-Extra\"><a href=\"#10-Extra\" class=\"headerlink\" title=\"10. Extra\"></a>10. Extra</h3><blockquote><p>该列包含 MySQL 查询的详细信息。</p></blockquote><h5 id=\"10-1-Using-filesort-出现这个表示效果不好\"><a href=\"#10-1-Using-filesort-出现这个表示效果不好\" class=\"headerlink\" title=\"10.1 Using filesort (出现这个表示效果不好)\"></a>10.1 Using filesort (出现这个表示效果不好)</h5><p>说明 MySQL 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。<br>MySQL 中无法利用索引完成的排序操作称为“文件排序”</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHmtQH.png\" alt=\"ZHmtQH.png\"></p><h5 id=\"10-2-Using-temporary-出现这个表示效果不好\"><a href=\"#10-2-Using-temporary-出现这个表示效果不好\" class=\"headerlink\" title=\"10.2 Using temporary (出现这个表示效果不好)\"></a>10.2 Using temporary (出现这个表示效果不好)</h5><p>使用了临时表保存中间结果，MySQL 在对查询结果进行排序是使用临时表。<br>常见于排序 <code>ORDER BY</code> 和分组查询 <code>GROUP BY</code></p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHn5DA.png\" alt=\"ZHn5DA.png\"></p><h5 id=\"10-3-Using-index-出现这个表示效果好\"><a href=\"#10-3-Using-index-出现这个表示效果好\" class=\"headerlink\" title=\"10.3 Using index (出现这个表示效果好)\"></a>10.3 Using index (出现这个表示效果好)</h5><p>表示相应的 <code>SELECT</code> 操作中使用了覆盖索引，避免访问了表的数据行，效率不错。<br>如果同时出现 <code>Using where</code> 表示索引被用来执行索引键值的查找<br>如果没有出现 <code>Using where</code> 表示索引用来读取数据而非执行查找动作。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHEDxA.png\" alt=\"ZHEDxA.png\"></p><h5 id=\"10-4-Using-where\"><a href=\"#10-4-Using-where\" class=\"headerlink\" title=\"10.4 Using where\"></a>10.4 Using where</h5><p>表示使用了 <code>WHERE</code> 过滤</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHKnyQ.png\" alt=\"ZHKnyQ.png\"></p><h5 id=\"10-5-Using-join-buffer\"><a href=\"#10-5-Using-join-buffer\" class=\"headerlink\" title=\"10.5 Using join buffer\"></a>10.5 Using join buffer</h5><blockquote><p>使用了连接缓存</p></blockquote><h5 id=\"10-6-Impossible-where\"><a href=\"#10-6-Impossible-where\" class=\"headerlink\" title=\"10.6 Impossible where\"></a>10.6 Impossible where</h5><p><code>WHERE</code> 子句的值总是 False ， 不能用来获取任何数据列。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHQnVs.png\" alt=\"ZHQnVs.png\"></p><h2 id=\"九、避免索引失效\"><a href=\"#九、避免索引失效\" class=\"headerlink\" title=\"九、避免索引失效\"></a>九、避免索引失效</h2><h3 id=\"1-全值匹配\"><a href=\"#1-全值匹配\" class=\"headerlink\" title=\"1. 全值匹配\"></a>1. 全值匹配</h3><p>对于联合索引，在 <code>WHERE</code> 子查询是尽量使用所有索引列来过滤查询</p><h3 id=\"2-最左前缀原则\"><a href=\"#2-最左前缀原则\" class=\"headerlink\" title=\"2. 最左前缀原则\"></a>2. 最左前缀原则</h3><p>联合索引下，查询从索引的最左前列开始并且<strong>不能跳过索引中间的列</strong></p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH1O2V.png\" alt=\"ZH1O2V.png\"></p><h3 id=\"3-不在索引列上做任何操作\"><a href=\"#3-不在索引列上做任何操作\" class=\"headerlink\" title=\"3. 不在索引列上做任何操作\"></a>3. 不在索引列上做任何操作</h3><p>不要在索引列上进行 计算、函数、（自动或手动）类型转换，否则会导致索引失效而转向全表扫描。</p><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH1c4I.png\" alt=\"ZH1c4I.png\"></p><h3 id=\"4-范围条件查询会导致右边的索引失效\"><a href=\"#4-范围条件查询会导致右边的索引失效\" class=\"headerlink\" title=\"4. 范围条件查询会导致右边的索引失效\"></a>4. 范围条件查询会导致右边的索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHJQi9.png\" alt=\"ZHJQi9.png\"></p><p><strong>解释：</strong><br>当我们三个索引都使用时， <code>key_len</code> 为 107，在使用前两个索引时， <code>key_len</code> 值为 40<br>此时，我们在 <code>WHERE</code> 子查询过滤条件中使用了范围条件，从而导致索引 <code>addr</code> 失效。</p><h3 id=\"5-尽量使用覆盖索引，减少-SELECT-的使用\"><a href=\"#5-尽量使用覆盖索引，减少-SELECT-的使用\" class=\"headerlink\" title=\"5. 尽量使用覆盖索引，减少 SELECT * 的使用\"></a>5. 尽量使用覆盖索引，减少 <code>SELECT *</code> 的使用</h3><h3 id=\"6-使用不等于-或-lt-gt-会导致索引失效\"><a href=\"#6-使用不等于-或-lt-gt-会导致索引失效\" class=\"headerlink\" title=\"6. 使用不等于(!= 或 &lt;&gt;) 会导致索引失效\"></a>6. 使用不等于(!= 或 &lt;&gt;) 会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHarb6.png\" alt=\"ZHarb6.png\"></p><h3 id=\"7-is-null-is-not-null-也会导致索引失效\"><a href=\"#7-is-null-is-not-null-也会导致索引失效\" class=\"headerlink\" title=\"7. is null, is not null 也会导致索引失效\"></a>7. is null, is not null 也会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZH7FYD.png\" alt=\"ZH7FYD.png\"></p><h3 id=\"8-LIKE-以通配符开头-‘-字符串’-会导致索引失效\"><a href=\"#8-LIKE-以通配符开头-‘-字符串’-会导致索引失效\" class=\"headerlink\" title=\"8. LIKE 以通配符开头 (‘%字符串’) 会导致索引失效\"></a>8. LIKE 以通配符开头 (‘%字符串’) 会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHHc8g.png\" alt=\"ZHHc8g.png\"></p><p><strong>解决办法</strong><br>可以使用以通配符结尾来检索 <code>&#39;字符串%&#39;</code></p><h3 id=\"9-字符串不加引号会导致索引失效\"><a href=\"#9-字符串不加引号会导致索引失效\" class=\"headerlink\" title=\"9. 字符串不加引号会导致索引失效\"></a>9. 字符串不加引号会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHb1Mj.png\" alt=\"ZHb1Mj.png\"></p><p><strong>解释</strong><br>第 3 条里说道，不要自动或手动做类型转换。<br>这里 <code>20000</code> 为字符串，当我们在查询时不加引号的话，那么 MySQL 会自动做类型转换，导致索引失效</p><h3 id=\"10-少用-OR，会导致索引失效\"><a href=\"#10-少用-OR，会导致索引失效\" class=\"headerlink\" title=\"10. 少用 OR，会导致索引失效\"></a>10. 少用 OR，会导致索引失效</h3><p><img src=\"https://s2.ax1x.com/2019/07/16/ZHqkfU.png\" alt=\"ZHqkfU.png\"></p><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy8tn16s0001m6wwsewsije9","category_id":"cjy8tn16y0005m6wwtmzgxsq7","_id":"cjy8tn174000bm6wwt1fetfug"},{"post_id":"cjy8tn16w0003m6ww568o2yyz","category_id":"cjy8tn1720009m6ww78a6sxj9","_id":"cjy8tn174000em6wwwcgpxwkr"},{"post_id":"cjy8tn16z0007m6wwcbafvtp2","category_id":"cjy8tn174000cm6ww8gjtfeic","_id":"cjy8tn179000hm6ww628i482e"},{"post_id":"cjy8tn1710008m6www54kcmge","category_id":"cjy8tn175000fm6wwmn6uopnm","_id":"cjy8tn179000lm6wwi630uc2i"}],"PostTag":[{"post_id":"cjy8tn16s0001m6wwsewsije9","tag_id":"cjy8tn16z0006m6wwhtosj33u","_id":"cjy8tn179000jm6wwwqn503c4"},{"post_id":"cjy8tn16s0001m6wwsewsije9","tag_id":"cjy8tn172000am6ww6r7q66is","_id":"cjy8tn179000km6wwp1oqqj1k"},{"post_id":"cjy8tn16s0001m6wwsewsije9","tag_id":"cjy8tn174000dm6wws6c94rv2","_id":"cjy8tn179000nm6wwhy7z6kr4"},{"post_id":"cjy8tn16s0001m6wwsewsije9","tag_id":"cjy8tn175000gm6ww1w5cj1jn","_id":"cjy8tn17a000om6wwa2gzeubp"},{"post_id":"cjy8tn16w0003m6ww568o2yyz","tag_id":"cjy8tn179000im6wwi4a3go6j","_id":"cjy8tn17a000qm6wwikgjm1ss"},{"post_id":"cjy8tn16z0007m6wwcbafvtp2","tag_id":"cjy8tn179000mm6wwmibfr99f","_id":"cjy8tn17a000tm6ww9mufrv2g"},{"post_id":"cjy8tn16z0007m6wwcbafvtp2","tag_id":"cjy8tn17a000pm6ww9wa1kl0r","_id":"cjy8tn17b000um6wwmpedb20o"},{"post_id":"cjy8tn16z0007m6wwcbafvtp2","tag_id":"cjy8tn17a000rm6wwvyd6a3s3","_id":"cjy8tn17c000wm6wwt3bscg9i"},{"post_id":"cjy8tn1710008m6www54kcmge","tag_id":"cjy8tn17a000sm6ww3bl2ycv1","_id":"cjy8tn17c000ym6wwvdeb40oo"},{"post_id":"cjy8tn1710008m6www54kcmge","tag_id":"cjy8tn174000dm6wws6c94rv2","_id":"cjy8tn17c000zm6wwimtthmyj"},{"post_id":"cjy8tn1710008m6www54kcmge","tag_id":"cjy8tn17c000xm6wwzo0o49xg","_id":"cjy8tn17c0010m6wwe0x98ja5"}],"Tag":[{"name":"Python","_id":"cjy8tn16z0006m6wwhtosj33u"},{"name":"HTTP","_id":"cjy8tn172000am6ww6r7q66is"},{"name":"MySQL","_id":"cjy8tn174000dm6wws6c94rv2"},{"name":"面试","_id":"cjy8tn175000gm6ww1w5cj1jn"},{"name":"Golang","_id":"cjy8tn179000im6wwi4a3go6j"},{"name":"Flask","_id":"cjy8tn179000mm6wwmibfr99f"},{"name":"Flask-SQLAchemy","_id":"cjy8tn17a000pm6ww9wa1kl0r"},{"name":"SQLAchemy","_id":"cjy8tn17a000rm6wwvyd6a3s3"},{"name":"索引","_id":"cjy8tn17a000sm6ww3bl2ycv1"},{"name":"数据库","_id":"cjy8tn17c000xm6wwzo0o49xg"}]}}